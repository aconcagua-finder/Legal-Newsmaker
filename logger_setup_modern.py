"""
Modern Logger Setup –¥–ª—è NEWSMAKER —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Rich library –¥–ª—è —Å—Ç–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
from pathlib import Path
from datetime import datetime
from typing import Optional, List, Dict

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Rich, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
try:
    from rich.console import Console
    from rich.logging import RichHandler
    from rich.table import Table
    from rich.panel import Panel
    from rich.text import Text
    from rich import print as rprint
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False

from loguru import logger
import config

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–∞–ø–ø–µ—Ä –∏–∫–æ–Ω–æ–∫
sys.path.insert(0, str(Path(__file__).parent))
from utils.icon_mapper import IconMapper, IconStyle


class ModernLogger:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏"""
    
    def __init__(self):
        self.icon_mapper = IconMapper()
        self.console = Console() if RICH_AVAILABLE else None
        
        # –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏–∫–æ–Ω–∫–∏ –∏ —Ü–≤–µ—Ç–∞
        self.level_icons = {
            'DEBUG': ('üîç', 'dim cyan', '[DEBUG]'),
            'INFO': ('üìä', 'blue', '[INFO]'),
            'SUCCESS': ('‚úÖ', 'green', '[OK]'),
            'WARNING': ('‚ö†Ô∏è', 'yellow', '[WARN]'),
            'ERROR': ('‚ùå', 'red', '[ERROR]'),
            'CRITICAL': ('üí•', 'bold red', '[CRITICAL]')
        }
        
        self.setup_logger()
    
    def setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.remove()
        
        if RICH_AVAILABLE and sys.stdout.isatty():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Rich –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
            self._setup_rich_logging()
        else:
            # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
            self._setup_text_logging()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._setup_file_logging()
    
    def _setup_rich_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Rich –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        def rich_format(record):
            """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Rich"""
            level = record["level"].name
            icon, color, _ = self.level_icons.get(level, ('üìù', 'white', '[LOG]'))
            
            # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç–∏–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
            message = self.icon_mapper.replace_all_emojis(
                record["message"], 
                IconStyle.RICH
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = record["time"].strftime("%H:%M:%S")
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if level == "ERROR" or level == "CRITICAL":
                return f"[bold {color}]{icon}[/bold {color}] [{color}]{time_str}[/{color}] {message}"
            else:
                return f"{icon} [dim]{time_str}[/dim] {message}"
        
        logger.add(
            RichHandler(console=self.console, rich_tracebacks=True),
            format=rich_format,
            level=config.LOG_LEVEL
        )
    
    def _setup_text_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        def text_format(record):
            """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ Rich"""
            level = record["level"].name
            _, _, text_icon = self.level_icons.get(level, ('üìù', 'white', '[LOG]'))
            
            # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            message = self.icon_mapper.replace_all_emojis(
                record["message"], 
                IconStyle.TEXT
            )
            
            time_str = record["time"].strftime("%H:%M:%S")
            
            return f"{text_icon} {time_str} | {message}\n"
        
        logger.add(
            sys.stdout,
            format=text_format,
            level=config.LOG_LEVEL,
            colorize=True
        )
    
    def _setup_file_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path(config.LOG_DIR)
        log_dir.mkdir(exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ - –±–µ–∑ –∏–∫–æ–Ω–æ–∫, —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        logger.add(
            log_dir / config.LOG_FILE,
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
            level="DEBUG",
            rotation=config.LOG_ROTATION,
            retention=config.LOG_RETENTION,
            compression="zip",
            filter=lambda record: self.icon_mapper.strip_all_icons(record["message"])
        )
        
        # –õ–æ–≥ –æ—à–∏–±–æ–∫
        logger.add(
            log_dir / "errors.log",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
            level="ERROR",
            rotation="1 week",
            filter=lambda record: self.icon_mapper.strip_all_icons(record["message"])
        )
    
    def print_startup_banner(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        
        if RICH_AVAILABLE and self.console:
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä —Å Rich
            banner = Panel.fit(
                Text.from_markup(
                    "[bold cyan]NEWSMAKER[/bold cyan] [dim]v2.1.0[/dim]\n"
                    "[yellow]–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π[/yellow]\n"
                    f"[dim]{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}[/dim]",
                    justify="center"
                ),
                border_style="bright_blue",
                padding=(1, 2)
            )
            self.console.print(banner)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            table = Table(title="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", show_header=False)
            table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
            table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
            
            table.add_row("üìÖ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π", config.COLLECTION_TIME)
            table.add_row("üì∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π", "7 –≤ –¥–µ–Ω—å")
            table.add_row("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", f"{len(config.PUBLICATION_SCHEDULE)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            table.add_row("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–í–∫–ª—é—á–µ–Ω–∞")
            
            self.console.print(table)
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä
            print("\n" + "="*50)
            print(" " * 15 + "NEWSMAKER v2.1.0")
            print(" " * 5 + "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            print("="*50)
            print(f"[CONFIG] –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π: {config.COLLECTION_TIME}")
            print(f"[CONFIG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: 7 –≤ –¥–µ–Ω—å")
            print(f"[CONFIG] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {len(config.PUBLICATION_SCHEDULE)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            print("="*50 + "\n")
    
    def log_with_icon(self, level: str, message: str, icon: Optional[str] = None):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
            icon: –ö–∞—Å—Ç–æ–º–Ω–∞—è –∏–∫–æ–Ω–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if icon:
            formatted_icon = self.icon_mapper.get_icon(icon)
            message = f"{formatted_icon} {message}"
        
        getattr(logger, level.lower())(message)
    
    def create_progress_bar(self, total: int, description: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞"):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        
        if RICH_AVAILABLE and self.console:
            from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
            
            return Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                BarColumn(),
                TaskProgressColumn(),
                console=self.console
            )
        else:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            class SimpleProgress:
                def __init__(self, total, desc):
                    self.total = total
                    self.current = 0
                    self.desc = desc
                
                def update(self, advance=1):
                    self.current += advance
                    percent = (self.current / self.total) * 100
                    print(f"\r[PROGRESS] {self.desc}: {percent:.1f}%", end="")
                    if self.current >= self.total:
                        print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ
            
            return SimpleProgress(total, description)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
modern_logger = ModernLogger()


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def setup_logger():
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
    return modern_logger


def log_startup_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    modern_logger.print_startup_banner()


def log_system_info():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    logger.info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    logger.info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"Rich –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if RICH_AVAILABLE else '–ù–µ—Ç'}")


def get_log_stats() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤"""
    log_dir = Path(config.LOG_DIR)
    if not log_dir.exists():
        return ["–ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"]
    
    stats = []
    total_size = 0
    file_count = 0
    
    for log_file in log_dir.glob("*.log*"):
        size = log_file.stat().st_size
        total_size += size
        file_count += 1
    
    stats.append(f"–§–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {file_count}")
    stats.append(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / 1024 / 1024:.2f} MB")
    
    return stats


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    setup_logger()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
    log_startup_banner()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.debug("üîç –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.info("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.success("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    logger.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    logger.error("‚ùå –û—à–∏–±–∫–∞")
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    log_system_info()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = get_log_stats()
    for stat in stats:
        logger.info(f"üìä {stat}")