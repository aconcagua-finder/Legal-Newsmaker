"""
–ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è NEWSMAKER

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,
–≤–∞–ª–∏–¥–∞—Ü–∏—é API –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤.
"""

import re
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Tuple
from pathlib import Path
from loguru import logger

import config
from types_models import (
    NewsItem, NewsFileData, TelegramMessage,
    validate_news_item, NewsPriority
)


# ========================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–û–í–û–°–¢–ï–ô
# ========================================================================

def validate_news_content(content: str) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        content: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if not content:
        return False, "–ö–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π"
    
    if len(content) < config.MIN_CONTENT_LENGTH:
        return False, f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º {config.MIN_CONTENT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"
    
    if len(content) > config.MAX_CONTENT_LENGTH:
        return False, f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {config.MAX_CONTENT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if 'üìú' not in content and '–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô' not in content:
        return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ—Å—Ç–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)"
    
    return True, None


def validate_news_sources(sources: List[str]) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        sources: –°–ø–∏—Å–æ–∫ URL –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if not sources:
        return False, "–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
    
    url_pattern = re.compile(
        r'^https?://'  # http:// –∏–ª–∏ https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # –¥–æ–º–µ–Ω
        r'localhost|'  # localhost
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # –∏–ª–∏ IP
        r'(?::\d+)?'  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    
    for source in sources:
        if not url_pattern.match(source):
            return False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source}"
    
    return True, None


def validate_news_priority(priority: int) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-24)
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if not isinstance(priority, int):
        return False, "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–æ 24 –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å
    max_priority = config.PUBLICATIONS_PER_DAY if hasattr(config, 'PUBLICATIONS_PER_DAY') else 7
    
    if priority < 1 or priority > max_priority:
        return False, f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {max_priority}, –ø–æ–ª—É—á–µ–Ω {priority}"
    
    return True, None


def validate_news_item_full(news: Dict[str, Any]) -> Tuple[bool, List[str]]:
    """
    –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        news: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        Tuple[bool, List[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
    """
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if not validate_news_item(news):
        errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ—Å—Ç–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if 'content' in news:
        valid, error = validate_news_content(news['content'])
        if not valid:
            errors.append(f"–ö–æ–Ω—Ç–µ–Ω—Ç: {error}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
        is_fresh, date_reason = is_content_fresh(news['content'])
        if not is_fresh:
            errors.append(f"–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å: {date_reason}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if 'sources' in news:
        valid, error = validate_news_sources(news['sources'])
        if not valid:
            errors.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {error}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    if 'priority' in news:
        valid, error = validate_news_priority(news['priority'])
        if not valid:
            errors.append(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {error}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if 'scheduled_time' in news:
        if not validate_time_format(news['scheduled_time']):
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {news['scheduled_time']}")
    
    return len(errors) == 0, errors


# ========================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò –ò –î–ê–¢
# ========================================================================

def extract_date_from_content(content: str) -> Optional[datetime]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        content: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        datetime –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç
    patterns = [
        r'(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+(\d{4})',
        r'—Å\s+(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)',
        r'(\d{1,2})\.(\d{1,2})\.(\d{4})',
        r'(\d{4})-(\d{1,2})-(\d{1,2})'
    ]
    
    months = {
        '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
        '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
        '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
    }
    
    for pattern in patterns:
        matches = re.findall(pattern, content.lower())
        for match in matches:
            try:
                if len(match) == 3:
                    if match[1] in months:
                        # –§–æ—Ä–º–∞—Ç: "–¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥"
                        day, month_name, year = match
                        month = months[month_name]
                        return datetime(int(year), month, int(day))
                    else:
                        # –§–æ—Ä–º–∞—Ç: "–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥" –∏–ª–∏ "–≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å"
                        if '.' in content:
                            day, month, year = match
                            return datetime(int(year), int(month), int(day))
                        else:
                            year, month, day = match
                            return datetime(int(year), int(month), int(day))
            except (ValueError, KeyError):
                continue
                
    return None


def is_content_fresh(content: str, max_age_days: int = 3) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–µ–∂–∏–π –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        content: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        max_age_days: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–Ω—è—Ö
        
    Returns:
        (is_fresh, reason) - —Å–≤–µ–∂–∞—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∏ –ø—Ä–∏—á–∏–Ω–∞
    """
    extracted_date = extract_date_from_content(content)
    
    if not extracted_date:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    
    now = datetime.now()
    age = (now - extracted_date).days
    
    if age < 0:
        return True, f"–ë—É–¥—É—â–∞—è –¥–∞—Ç–∞ (–≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É {extracted_date.strftime('%d.%m.%Y')})"
    elif age <= max_age_days:
        return True, f"–°–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å ({age} –¥–Ω. –Ω–∞–∑–∞–¥, {extracted_date.strftime('%d.%m.%Y')})"
    else:
        return False, f"–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –Ω–æ–≤–æ—Å—Ç—å ({age} –¥–Ω. –Ω–∞–∑–∞–¥, {extracted_date.strftime('%d.%m.%Y')})"


def get_date_feedback_for_next_prompt(content: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity
    
    Args:
        content: –¢–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        –¢–µ–∫—Å—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    """
    is_fresh, reason = is_content_fresh(content)
    
    if not is_fresh:
        return f"""
–ü–†–û–ë–õ–ï–ú–ê –° –ü–†–ï–î–´–î–£–©–ò–ú –†–ï–ó–£–õ–¨–¢–ê–¢–û–ú: {reason}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –î–õ–Ø –ù–û–í–û–ì–û –ü–û–ò–°–ö–ê:
- –ò—â–∏ –¢–û–õ–¨–ö–û –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 –¥–Ω—è
- –ü—Ä–æ–≤–µ—Ä—è–π –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
- –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π - –ª—É—á—à–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ
        """
    else:
        return "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç."

def validate_time_format(time_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM
    
    Args:
        time_str: –°—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    """
    pattern = re.compile(r'^([0-1][0-9]|2[0-3]):[0-5][0-9]$')
    return bool(pattern.match(time_str))


def validate_date_format(date_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã YYYY-MM-DD
    
    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    """
    try:
        datetime.strptime(date_str, '%Y-%m-%d')
        return True
    except ValueError:
        return False


def validate_datetime_iso(datetime_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç ISO —Ñ–æ—Ä–º–∞—Ç datetime
    
    Args:
        datetime_str: –°—Ç—Ä–æ–∫–∞ datetime
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    """
    try:
        datetime.fromisoformat(datetime_str)
        return True
    except (ValueError, TypeError):
        return False


# ========================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø API –û–¢–í–ï–¢–û–í
# ========================================================================

def validate_perplexity_response(response: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Perplexity API
    
    Args:
        response: –û—Ç–≤–µ—Ç API
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if not response:
        return False, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
    
    if 'choices' not in response:
        return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'choices'"
    
    if not response['choices']:
        return False, "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ 'choices'"
    
    if 'message' not in response['choices'][0]:
        return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'message' –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ"
    
    if 'content' not in response['choices'][0]['message']:
        return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'content' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
    
    content = response['choices'][0]['message']['content']
    if not content or not isinstance(content, str):
        return False, "–ö–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π"
    
    return True, None


def validate_openai_image_response(response: Any) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI Image API
    
    Args:
        response: –û—Ç–≤–µ—Ç API
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if not response:
        return False, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
    
    if not hasattr(response, 'data'):
        return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'data'"
    
    if not response.data:
        return False, "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    
    first_image = response.data[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –∏–ª–∏ base64
    has_url = hasattr(first_image, 'url') and first_image.url
    has_b64 = hasattr(first_image, 'b64_json') and first_image.b64_json
    
    if not has_url and not has_b64:
        return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –∏ base64 –¥–∞–Ω–Ω—ã–µ"
    
    return True, None


# ========================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø –§–ê–ô–õ–û–í
# ========================================================================

def validate_json_file(filepath: Path) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å JSON —Ñ–∞–π–ª–∞
    
    Args:
        filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if not filepath.exists():
        return False, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    if not filepath.is_file():
        return False, "–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º"
    
    if filepath.suffix != '.json':
        return False, "–§–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json"
    
    try:
        import json
        with open(filepath, 'r', encoding='utf-8') as f:
            json.load(f)
        return True, None
    except json.JSONDecodeError as e:
        return False, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"


def validate_news_file(filepath: Path) -> Tuple[bool, List[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    
    Args:
        filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–æ–≤–æ—Å—Ç–µ–π
        
    Returns:
        Tuple[bool, List[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫)
    """
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
    valid, error = validate_json_file(filepath)
    if not valid:
        errors.append(error)
        return False, errors
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    try:
        import json
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['date', 'collected_at', 'total_news', 'news']
        for field in required_fields:
            if field not in data:
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
        
        if errors:
            return False, errors
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
        if not validate_date_format(data['date']):
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {data['date']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞
        if not validate_datetime_iso(data['collected_at']):
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞: {data['collected_at']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        if not isinstance(data['news'], list):
            errors.append("–ü–æ–ª–µ 'news' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å
            for i, news in enumerate(data['news']):
                news_valid, news_errors = validate_news_item_full(news)
                if not news_valid:
                    errors.append(f"–ù–æ–≤–æ—Å—Ç—å {i+1}: {'; '.join(news_errors)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if len(data['news']) != data['total_news']:
            errors.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: —É–∫–∞–∑–∞–Ω–æ {data['total_news']}, –Ω–∞–π–¥–µ–Ω–æ {len(data['news'])}")
        
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    
    return len(errors) == 0, errors


def validate_image_file(filepath: Path) -> Tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        filepath: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if not filepath.exists():
        return False, "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    if not filepath.is_file():
        return False, "–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    valid_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.webp'}
    if filepath.suffix.lower() not in valid_extensions:
        return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {filepath.suffix}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    file_size = filepath.stat().st_size
    max_size = 10 * 1024 * 1024  # 10MB
    if file_size > max_size:
        return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º {max_size})"
    
    if file_size == 0:
        return False, "–§–∞–π–ª –ø—É—Å—Ç–æ–π"
    
    return True, None


# ========================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í –†–ê–°–ü–ò–°–ê–ù–ò–Ø
# ========================================================================

def validate_timezone(tz_name: str) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    
    Args:
        tz_name: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Moscow")
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    try:
        from timezone_utils import get_timezone
        get_timezone(tz_name)
        return True, None
    except Exception as e:
        return False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_name}"


def validate_publications_count(count: int) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å
    
    Args:
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if not isinstance(count, int):
        return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    
    if count < 1:
        return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1"
    
    if count > 24:
        return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 24"
    
    return True, None


def validate_publication_schedule(schedule: List[str], count: int) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    
    Args:
        schedule: –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º—ë–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        count: –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if len(schedule) < count:
        return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º—ë–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {len(schedule)} –∏–∑ {count}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    time_pattern = re.compile(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$')
    for time_str in schedule[:count]:
        if not time_pattern.match(time_str):
            return False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º—ë–Ω
    unique_times = set(schedule[:count])
    if len(unique_times) != count:
        return False, "–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–∞"
    
    return True, None


# ========================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ========================================================================

def validate_api_keys() -> Tuple[bool, List[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π
    
    Returns:
        Tuple[bool, List[str]]: (–≤—Å–µ –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º)
    """
    issues = []
    
    # Perplexity API
    if not config.PERPLEXITY_API_KEY:
        issues.append("PERPLEXITY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    elif not config.PERPLEXITY_API_KEY.startswith('pplx-'):
        issues.append("PERPLEXITY_API_KEY –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    
    # OpenAI API
    if not config.OPENAI_API_KEY:
        issues.append("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    elif not config.OPENAI_API_KEY.startswith('sk-'):
        issues.append("OPENAI_API_KEY –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    
    # Telegram
    if not config.TELEGRAM_BOT_TOKEN:
        issues.append("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    elif ':' not in config.TELEGRAM_BOT_TOKEN:
        issues.append("TELEGRAM_BOT_TOKEN –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    
    if not config.TELEGRAM_CHANNEL_ID:
        issues.append("TELEGRAM_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    elif not config.TELEGRAM_CHANNEL_ID.startswith(('@', '-')):
        issues.append("TELEGRAM_CHANNEL_ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏–ª–∏ -")
    
    return len(issues) == 0, issues


def validate_schedule() -> Tuple[bool, List[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    
    Returns:
        Tuple[bool, List[str]]: (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º)
    """
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞
    if not validate_time_format(config.COLLECTION_TIME):
        issues.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞: {config.COLLECTION_TIME}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    if len(config.PUBLICATION_SCHEDULE) != config.MAX_NEWS_PER_DAY:
        issues.append(
            f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {len(config.PUBLICATION_SCHEDULE)} –≤—Ä–µ–º—ë–Ω "
            f"–¥–ª—è {config.MAX_NEWS_PER_DAY} –Ω–æ–≤–æ—Å—Ç–µ–π"
        )
    
    for i, time_str in enumerate(config.PUBLICATION_SCHEDULE, 1):
        if not validate_time_format(time_str):
            issues.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {i}: {time_str}")
    
    return len(issues) == 0, issues


# ========================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò
# ========================================================================

def run_full_validation() -> bool:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
    
    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å—ë –≤–∞–ª–∏–¥–Ω–æ
    """
    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
    all_valid = True
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–µ–π
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π...")
    valid, issues = validate_api_keys()
    if not valid:
        all_valid = False
        for issue in issues:
            logger.error(f"  ‚ùå {issue}")
    else:
        logger.info("  ‚úÖ API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    valid, issues = validate_schedule()
    if not valid:
        all_valid = False
        for issue in issues:
            logger.error(f"  ‚ùå {issue}")
    else:
        logger.info("  ‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    for dir_path in [config.DATA_DIR, config.LOGS_DIR, config.IMAGES_DIR]:
        if not dir_path.exists():
            logger.warning(f"  ‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")
            dir_path.mkdir(parents=True, exist_ok=True)
            logger.info(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
        else:
            logger.info(f"  ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")
    
    # –ò—Ç–æ–≥
    if all_valid:
        logger.info("üéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    return all_valid


# ========================================================================
# –¢–ï–°–¢–´
# ========================================================================

def test_validation_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    assert validate_time_format("08:30") == True
    assert validate_time_format("25:00") == False
    assert validate_time_format("8:30") == False
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã
    assert validate_date_format("2025-01-15") == True
    assert validate_date_format("15-01-2025") == False
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    assert validate_news_priority(1)[0] == True
    assert validate_news_priority(7)[0] == True
    assert validate_news_priority(0)[0] == False
    assert validate_news_priority(8)[0] == False
    
    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    test_content = "–° 1 –∏—é–ª—è 2025 –≥–æ–¥–∞ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É –Ω–æ–≤—ã–π –∑–∞–∫–æ–Ω"
    extracted = extract_date_from_content(test_content)
    assert extracted is not None
    assert extracted.month == 7
    
    logger.info("‚úÖ –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")


if __name__ == "__main__":
    test_validation_functions()
    run_full_validation()