import sys
import os
from pathlib import Path
from loguru import logger
from datetime import datetime

import config


def setup_logger():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ loguru
    logger.remove()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # –§–æ—Ä–º–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª (–ø–æ–¥—Ä–æ–±–Ω—ã–π)
    file_format = (
        "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
        "<level>{level: <8}</level> | "
        "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
        "<level>{message}</level>"
    )
    
    # –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (–∫—Ä–∞—Å–∏–≤—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π)
    console_format = (
        "<green>{time:HH:mm:ss}</green> | "
        "<level>{level: <8}</level> | "
        "<level>{message}</level>"
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (—Ü–≤–µ—Ç–Ω–æ–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π)
    logger.add(
        sys.stdout,
        format=console_format,
        level=config.LOG_LEVEL,
        colorize=True,
        enqueue=True
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    logger.add(
        logs_dir / config.LOG_FILE,
        format=file_format,
        level="DEBUG",
        rotation="10 MB",  # –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 10MB
        retention="30 days",  # –•—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏ 30 –¥–Ω–µ–π
        compression="zip",  # –°–∂–∏–º–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        enqueue=True,
        encoding="utf-8"
    )
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
    logger.add(
        logs_dir / "errors.log",
        format=file_format,
        level="ERROR",
        rotation="5 MB",
        retention="60 days",
        compression="zip",
        enqueue=True,
        encoding="utf-8"
    )
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    daily_log_name = f"daily_{datetime.now().strftime('%Y%m')}.log"
    logger.add(
        logs_dir / daily_log_name,
        format=file_format,
        level="INFO",
        filter=lambda record: "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏" in record["message"].lower() or 
                             "daily job" in record["message"].lower() or
                             "üöÄ" in record["message"] or "‚úÖ" in record["message"] or "‚ùå" in record["message"],
        rotation="1 month",
        retention="12 months",
        compression="zip",
        enqueue=True,
        encoding="utf-8"
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    logger.info("üìù –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É: {logs_dir.absolute()}")
    logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.LOG_LEVEL}")


def log_system_info():
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("=" * 60)
    logger.info("üåü NEWSMAKER - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")
    logger.info("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    import platform
    logger.info(f"üíª –°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    logger.info(f"üêç Python: {platform.python_version()}")
    logger.info(f"üìÖ –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    
    perplexity_key_ok = bool(config.PERPLEXITY_API_KEY)
    telegram_token_ok = bool(config.TELEGRAM_BOT_TOKEN)
    telegram_channel_ok = bool(config.TELEGRAM_CHANNEL_ID)
    
    logger.info(f"  ‚úì Perplexity API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if perplexity_key_ok else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"  ‚úì Telegram —Ç–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_token_ok else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"  ‚úì Telegram –∫–∞–Ω–∞–ª: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_channel_ok else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"  ‚úì –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {config.DAILY_RUN_TIME}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not telegram_token_ok:
        logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    if not telegram_channel_ok:
        logger.warning("‚ö†Ô∏è TELEGRAM_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    config_complete = perplexity_key_ok and telegram_token_ok and telegram_channel_ok
    
    if config_complete:
        logger.info("üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–∞—è - –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    
    logger.info("=" * 60)


def log_startup_banner():
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                  NEWSMAKER                     ‚ïë
    ‚ïë            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å               ‚ïë
    ‚ïë         —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –†–§                ‚ïë
    ‚ïë                                                ‚ïë
    ‚ïë  ü§ñ AI: Perplexity Sonar-pro                  ‚ïë
    ‚ïë  üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è: Telegram                      ‚ïë
    ‚ïë  ‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞                 ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –±–∞–Ω–Ω–µ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    for line in banner.strip().split('\n'):
        logger.opt(colors=True).info(f"<cyan>{line}</cyan>")


def get_log_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    logs_dir = Path("logs")
    
    if not logs_dir.exists():
        return "–ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    stats = []
    stats.append(f"üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {logs_dir.absolute()}")
    
    # –†–∞–∑–º–µ—Ä –≤—Å–µ—Ö –ª–æ–≥ —Ñ–∞–π–ª–æ–≤
    total_size = 0
    log_count = 0
    
    for log_file in logs_dir.glob("*.log*"):
        if log_file.is_file():
            size = log_file.stat().st_size
            total_size += size
            log_count += 1
            
            # –ß–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
            if size < 1024:
                size_str = f"{size} B"
            elif size < 1024 * 1024:
                size_str = f"{size / 1024:.1f} KB"
            else:
                size_str = f"{size / (1024 * 1024):.1f} MB"
            
            stats.append(f"  üìÑ {log_file.name}: {size_str}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if total_size < 1024:
        total_str = f"{total_size} B"
    elif total_size < 1024 * 1024:
        total_str = f"{total_size / 1024:.1f} KB"
    else:
        total_str = f"{total_size / (1024 * 1024):.1f} MB"
    
    stats.insert(1, f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {log_count}, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_str}")
    
    return "\n".join(stats)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
def get_logger():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π logger –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö"""
    return logger 