#!/usr/bin/env python3
"""
OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∏–∫—Å–æ–≤ –∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –Ω–æ–≤–æ—Å—Ç—è–º
"""

import io
import base64
from typing import Optional
from loguru import logger
from openai import OpenAI

import config


class OpenAIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.api_key = config.OPENAI_API_KEY
        self.client = None
        
        if not self.api_key:
            logger.warning("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            self.client = OpenAI(api_key=self.api_key)
    
    def _create_comic_prompt(self, news_content: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∏–∫—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            news_content: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            
        Returns:
            str: –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π OpenAI
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º  —Ñ–∞–∫—Ç—ã –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–º–∏–∫—Å–∞
        key_points = []
        lines = news_content.split('\n')
        for line in lines:
            if 'üìú' in line:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                key_points.append(f"Legal document: {line.replace('üìú', '').strip()}")
            elif any(keyword in line.lower() for keyword in ['—à—Ç—Ä–∞—Ñ', '–Ω–∞–ª–æ–≥', '–∑–∞–∫–æ–Ω', '–∑–∞–ø—Ä–µ—Ç', '–ª—å–≥–æ—Ç–∞', '–ø–æ—Å–æ–±–∏–µ']):
                # –í–∞–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
                key_points.append(line.strip())
        
        context = ' '.join(key_points[:3])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–∞
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        import random
        styles = [
            "photorealistic digital art, dramatic lighting, meme-worthy composition",
            "modern illustration style, flat design with depth, vibrant colors",
            "editorial cartoon style, satirical but respectful, clean lines",
            "realistic 3D render, Pixar-like quality, expressive characters",
            "minimalist vector art, bold colors, simple but impactful"
        ]
        chosen_style = random.choice(styles)
        
        prompt = f"""
Create a witty single-panel illustration about Russian legal news:

TOPIC: {context}

STYLE: {chosen_style}

SCENE REQUIREMENTS:
- 1-2 modern Russian characters in everyday situations
- Contemporary setting (office, street, home, cafe)
- One speech bubble with short, witty Russian text
- Clear visual metaphor for the legal change
- Relatable, everyday scenario

CHARACTER REACTIONS (choose one):
üòÖ Confused but amused
ü§î Deeply contemplating
üò± Mildly shocked
üôÑ Sarcastically accepting
üí≠ Lost in thought

SPEECH BUBBLE IDEAS (adapt to topic):
"–¢–∞–∫, —á—Ç–æ —Ç–∞–º –æ–ø—è—Ç—å –ø—Ä–∏–¥—É–º–∞–ª–∏?"
"–ù—É –≤–æ—Ç, —Ç–µ–ø–µ—Ä—å –∏ —ç—Ç–æ..."
"–ê –º–æ–∂–Ω–æ –ø—Ä–æ—â–µ –±—ã–ª–æ?"
"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–µ–Ω—å–∫–æ..."
"–≠—Ç–æ —Ç–æ—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç?"

VISUAL APPROACH:
- Clean, modern composition
- Good contrast and readability
- Subtle humor without being offensive
- Professional but approachable
- Focus on human reactions and emotions

The image should be immediately understandable and shareable, capturing the essence of how regular people react to legal changes.
"""
        
        return prompt.strip()
    
    def generate_comic_image(self, news_content: str) -> Optional[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∏–∫—Å-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            news_content: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∏–∫—Å–∞
            
        Returns:
            bytes: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.client:
            logger.error("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            prompt = self._create_comic_prompt(news_content)
            logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–∏–∫—Å —Å –ø–æ–º–æ—â—å—é OpenAI Image Generation...")
            logger.debug(f"–ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
            
            response = self.client.images.generate(
                model="gpt-image-1",
                prompt=prompt,
                size="1024x1024",
                quality="medium",  # –î–ª—è gpt-image-1: low, medium, high, auto
                n=1
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL –∏–ª–∏ base64
            if hasattr(response.data[0], 'url') and response.data[0].url:
                # –ï—Å–ª–∏ –µ—Å—Ç—å URL, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_url = response.data[0].url
                import requests
                image_response = requests.get(image_url, timeout=30)
                image_response.raise_for_status()
                image_bytes = image_response.content
            elif hasattr(response.data[0], 'b64_json') and response.data[0].b64_json:
                # –ï—Å–ª–∏ –µ—Å—Ç—å base64, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
                image_bytes = base64.b64decode(response.data[0].b64_json)
            else:
                raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ URL, –Ω–∏ base64 –¥–∞–Ω–Ω—ã—Ö")
            
            logger.info(f"–ö–æ–º–∏–∫—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(image_bytes)} –±–∞–π—Ç")
            return image_bytes
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∏–∫—Å–∞: {e}")
            return None
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        if not self.client:
            logger.error("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = self.client.images.generate(
                model="gpt-image-1",
                prompt="Simple test image: a small blue circle on white background",
                size="1024x1024",
                quality="low",
                n=1
            )
            
            if response.data and len(response.data) > 0:
                logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error("OpenAI API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ OpenAI API: {e}")
            return False 