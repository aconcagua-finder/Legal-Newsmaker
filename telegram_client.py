import asyncio
import io
import re
import random
from datetime import datetime
from typing import Optional
from loguru import logger
import telegram
from telegram import Bot
from telegram.error import TelegramError
from telegram.request import HTTPXRequest
from difflib import SequenceMatcher

import config


class TelegramClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –∫–∞–Ω–∞–ª"""
    
    def __init__(self):
        self.bot_token = config.TELEGRAM_BOT_TOKEN
        self.channel_id = config.TELEGRAM_CHANNEL_ID
        self.bot = None
        
        if not self.bot_token:
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.channel_id:
            logger.warning("TELEGRAM_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    def _initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"""
        if self.bot is None:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            request = HTTPXRequest(
                connection_pool_size=1,
                read_timeout=60,
                write_timeout=60,
                connect_timeout=30,
                pool_timeout=30
            )
            self.bot = Bot(token=self.bot_token, request=request)
    
    async def _check_for_duplicates(self, new_content: str, similarity_threshold: float = 0.7) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            new_content: –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            similarity_threshold: –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (0.7 = 70% —Å—Ö–æ–∂–µ—Å—Ç–∏)
            
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å webhook
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (webhook –∫–æ–Ω—Ñ–ª–∏–∫—Ç)")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            return False
    
    def _clean_content_for_comparison(self, content: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Args:
            content: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        clean = re.sub(r'<[^>]+>', '', content)
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean = re.sub(r'[üé≠üìÖüí¨üìúüîóü§ñüïê]', '', clean)
        # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è
        clean = re.sub(r'\d{2}\.\d{2}\.\d{4}', '', clean)
        clean = re.sub(r'\d{2}:\d{2}', '', clean)
        # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏
        clean = re.sub(r'https?://[^\s]+', '', clean)
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean = re.sub(r'\s+', ' ', clean).strip()
        
        return clean.lower()
    
    def _generate_ironic_title(self, content: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ä–æ–Ω–∏—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            str: –ò—Ä–æ–Ω–∏—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        keywords = []
        if '—à—Ç—Ä–∞—Ñ' in content.lower():
            keywords.extend(['—à—Ç—Ä–∞—Ñ—ã', '–∫–æ—à–µ–ª—ë–∫'])
        if '–Ω–∞–ª–æ–≥' in content.lower():
            keywords.extend(['–Ω–∞–ª–æ–≥–∏', '–±—é–¥–∂–µ—Ç'])
        if '–ø–æ—Å–æ–±–∏–µ' in content.lower() or '–≤—ã–ø–ª–∞—Ç–∞' in content.lower():
            keywords.extend(['–ø–æ—Å–æ–±–∏—è', '–≤—ã–ø–ª–∞—Ç—ã'])
        if '–∑–∞–∫–æ–Ω' in content.lower():
            keywords.extend(['–∑–∞–∫–æ–Ω–æ–≤', '–Ω–æ—Ä–º—ã'])
        if '—Ü–∏—Ñ—Ä–æ–≤' in content.lower():
            keywords.extend(['—Ü–∏—Ñ—Ä–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'])
        
        # –ë–∞–∑–æ–≤—ã–µ –∏—Ä–æ–Ω–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        templates = [
            f"üé≠ –°–≤–æ–¥–∫–∞ –¥–Ω—è: —á—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –º–∏—Ä–µ {random.choice(keywords) if keywords else '—é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏–∏'}",
            f"üé™ –¶–∏—Ä–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è: —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∞–≤–∞",
            f"üéØ –í –º–∏—Ä–µ {random.choice(keywords) if keywords else '–∑–∞–∫–æ–Ω–æ–≤'}: —á—Ç–æ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?",
            f"üé® –ê—Ä—Ç-—Å–≤–æ–¥–∫–∞: —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª–µ–π",
            f"üé¨ –°–µ–≥–æ–¥–Ω—è –≤ —ç—Ñ–∏—Ä–µ: {random.choice(keywords) if keywords else '–ø—Ä–∞–≤–æ–≤—ã–µ'} –Ω–æ–≤–æ—Å—Ç–∏",
            f"üé™ –®–æ—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è: –æ–±–∑–æ—Ä –¥–Ω—è",
            f"üé≠ –¢–µ–∞—Ç—Ä –∞–±—Å—É—Ä–¥–∞: —á—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –∑–∞–∫–æ–Ω–∞—Ö"
        ]
        
        return random.choice(templates)
    
    def _format_legal_message(self, data: dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–ª—è Telegram
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å 'content' (—Ç–µ–∫—Å—Ç) –∏ 'sources' (—Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫)
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        content = data.get('content', '')
        sources = data.get('sources', [])

        # –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
        if sources:
            logger.debug(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ HTML —Å—Å—ã–ª–∫–∏")
            for i, source in enumerate(sources, 1):
                pattern = f"\\[{i}\\]"
                link = f'<a href="{source}">[{i}]</a>'
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω
                content, count = re.subn(pattern, link, content)
                if count > 0:
                    logger.debug(f"–ó–∞–º–µ–Ω–µ–Ω–æ {count} –≤—Ö–æ–∂–¥–µ–Ω–∏–π [{i}] –Ω–∞ HTML —Å—Å—ã–ª–∫—É: {source}")
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π [{i}] –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source}")

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏—à–µ–ª –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ (–≤—Å–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ),
        # —Ç–æ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if '\n' not in content and len(content) > 200:
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –º–∞—Ä–∫–µ—Ä–∞–º
            content = content.replace('üí¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô', '\n\nüí¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô')
            content = content.replace('–ò–°–¢–û–ß–ù–ò–ö–ò:', '\n\n–ò–°–¢–û–ß–ù–ò–ö–ò:')
            
            # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å –ø–æ—Å–ª–µ "–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê:"
            content = content.replace('–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê:', '–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê:\n\n')
            content = content.replace('–Æ–†–ò–°–¢–ê:', '–Æ–†–ò–°–¢–ê:\n\n')
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã –ø–æ —Ç–æ—á–∫–∞–º (–ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ + –ø—Ä–æ–±–µ–ª + –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞)
            # –ò—â–µ–º —Ç–æ—á–∫—É + –ø—Ä–æ–±–µ–ª + –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞, –Ω–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫ –∏ –∫–∞–≤—ã—á–µ–∫
            content = re.sub(r'(\.) ([–ê-–Ø–Å])', r'\1\n\n\2', content)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü –ø–æ—Å–ª–µ —Å—Å—ã–ª–æ–∫ –≤–∏–¥–∞ [—Ü–∏—Ñ—Ä–∞] –µ—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–∏—Ö –∏–¥–µ—Ç —Ç–µ–∫—Å—Ç
            content = re.sub(r'(\[\d+\])(\s*)([–ê-–Ø–Å])', r'\1\n\n\3', content)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
            content = '\n'.join(line.strip() for line in content.split('\n'))

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
        lines = content.split('\n')
        formatted_lines = []
        
        for line in lines:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–±–∑–∞—Ü–µ–≤
            if not line.strip():
                formatted_lines.append('')
            # –î–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏-–º–∞—Ä–∫–µ—Ä–∞–º–∏
            elif line.strip().startswith('üìú'):
                formatted_lines.append(f"<b>{line.strip()}</b>")
            # –î–ª—è —Å—Ç—Ä–æ–∫ —Å üí¨ –¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
            elif line.strip().startswith('üí¨'):
                if ':' in line:
                    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –¥–≤–æ–µ—Ç–æ—á–∏—é
                    parts = line.strip().split(':', 1)
                    formatted_lines.append(f"<b>{parts[0]}:</b>")
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
                    if len(parts) > 1 and parts[1].strip():
                        formatted_lines.append(parts[1].strip())
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è, –¥–µ–ª–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∂–∏—Ä–Ω–æ–π
                    formatted_lines.append(f"<b>{line.strip()}</b>")
            else:
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                formatted_lines.append(line.strip())
                
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã
        formatted_content = '\n'.join(formatted_lines)
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤—ã–π, –µ—Å–ª–∏ AI –µ–≥–æ –≤–µ—Ä–Ω—É–ª
        formatted_content = formatted_content.replace(
            "–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –Æ–†–ò–°–¢–ê:", 
            "–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö–ê–†–ú–ê–ù–ù–û–ì–û –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê:"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        return formatted_content
    
    def _split_long_message(self, message: str, max_length: int = 4000) -> list[str]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏
            
        Returns:
            list[str]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if len(message) <= max_length:
            return [message]
        
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
        paragraphs = message.split('\n\n')
        
        for paragraph in paragraphs:
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
            if len(current_part + paragraph + '\n\n') > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = paragraph + '\n\n'
                else:
                    # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                    sentences = paragraph.split('. ')
                    for sentence in sentences:
                        if len(current_part + sentence + '. ') > max_length:
                            if current_part:
                                parts.append(current_part.strip())
                                current_part = sentence + '. '
                            else:
                                # –ï—Å–ª–∏ –¥–∞–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
                                parts.append(sentence[:max_length-3] + "...")
                        else:
                            current_part += sentence + '. '
            else:
                current_part += paragraph + '\n\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        return parts
    
    async def send_message(self, message: dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª
        
        Args:
            message: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self._initialize_bot()
            
            if not self.bot_token or not self.channel_id:
                logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞")
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_message = self._format_legal_message(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if await self._check_for_duplicates(formatted_message):
                logger.warning("–ö–æ–Ω—Ç–µ–Ω—Ç –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ - –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É")
                return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –∞ –≤–∞–ª–∏–¥–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            message_parts = self._split_long_message(formatted_message)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(message_parts)} —á–∞—Å—Ç–µ–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
            for i, part in enumerate(message_parts):
                try:
                    await self.bot.send_message(
                        chat_id=self.channel_id,
                        text=part,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    
                    logger.info(f"–ß–∞—Å—Ç—å {i+1}/{len(message_parts)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                    if i < len(message_parts) - 1:
                        await asyncio.sleep(1)
                        
                except TelegramError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}: {e}")
                    return False
            
            logger.info("–í—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            self._initialize_bot()
            
            if not self.bot_token:
                logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ. –ë–æ—Ç: @{bot_info.username}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def send_message_with_image(self, message: dict, image_bytes: bytes) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram –∫–∞–Ω–∞–ª
        
        Args:
            message: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            image_bytes: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self._initialize_bot()
            
            if not self.bot_token or not self.channel_id:
                logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞")
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_message = self._format_legal_message(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if await self._check_for_duplicates(formatted_message):
                logger.warning("–ö–æ–Ω—Ç–µ–Ω—Ç –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ - –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É")
                return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –∞ –≤–∞–ª–∏–¥–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∏–∫—Å–æ–º –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–π—Ç–æ–≤
            image_file = io.BytesIO(image_bytes)
            image_file.name = "legal_comic.png"
            
            # Telegram –ª–∏–º–∏—Ç caption –¥–ª—è —Ñ–æ—Ç–æ: 1024 —Å–∏–º–≤–æ–ª–∞
            if len(formatted_message) <= 1000:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                await self.bot.send_photo(
                    chat_id=self.channel_id,
                    photo=image_file,
                    caption=formatted_message,
                    parse_mode='HTML'
                )
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∏–∫—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
            else:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                await self.bot.send_photo(
                    chat_id=self.channel_id,
                    photo=image_file
                )
                
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await asyncio.sleep(1)
                message_parts = self._split_long_message(formatted_message)
                
                for i, part in enumerate(message_parts):
                    await self.bot.send_message(
                        chat_id=self.channel_id,
                        text=part,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    
                    if i < len(message_parts) - 1:
                        await asyncio.sleep(1)
                
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∏–∫—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ñ–æ—Ç–æ + {len(message_parts)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π")
            
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∏–∫—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {e}")
            return False

    def send_legal_update(self, content: dict) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        
        Args:
            content: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
            try:
                loop = asyncio.get_running_loop()
                # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                import threading
                result = [False]
                
                def run_in_thread():
                    new_loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(new_loop)
                    try:
                        result[0] = new_loop.run_until_complete(self.send_message(content))
                    finally:
                        new_loop.close()
                
                thread = threading.Thread(target=run_in_thread)
                thread.start()
                thread.join()
                return result[0]
                
            except RuntimeError:
                # –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ loop, –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    result = loop.run_until_complete(self.send_message(content))
                    return result
                finally:
                    loop.close()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—ë—Ä—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    def send_legal_update_with_comic(self, content: dict, image_bytes: bytes) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –∫–æ–º–∏–∫—Å–æ–º
        
        Args:
            content: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            image_bytes: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∏–∫—Å–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
            try:
                loop = asyncio.get_running_loop()
                # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                import threading
                result = [False]
                
                def run_in_thread():
                    new_loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(new_loop)
                    try:
                        result[0] = new_loop.run_until_complete(self.send_message_with_image(content, image_bytes))
                    finally:
                        new_loop.close()
                
                thread = threading.Thread(target=run_in_thread)
                thread.start()
                thread.join()
                return result[0]
                
            except RuntimeError:
                # –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ loop, –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    result = loop.run_until_complete(self.send_message_with_image(content, image_bytes))
                    return result
                finally:
                    loop.close()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—ë—Ä—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∫–æ–º–∏–∫—Å–æ–º: {e}")
            return False

 