#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –¥–∞—Ç–∞–º
"""

import re
from datetime import datetime, timedelta
from typing import Optional


def extract_date_from_content(content: str) -> Optional[datetime]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        content: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        datetime –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç
    patterns = [
        r'(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+(\d{4})',
        r'—Å\s+(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)',
        r'(\d{1,2})\.(\d{1,2})\.(\d{4})',
        r'(\d{4})-(\d{1,2})-(\d{1,2})'
    ]
    
    months = {
        '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
        '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
        '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
    }
    
    for pattern in patterns:
        matches = re.findall(pattern, content.lower())
        for match in matches:
            try:
                if len(match) == 3:
                    if match[1] in months:
                        # –§–æ—Ä–º–∞—Ç: "–¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥"
                        day, month_name, year = match
                        month = months[month_name]
                        return datetime(int(year), month, int(day))
                    else:
                        # –§–æ—Ä–º–∞—Ç: "–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥" –∏–ª–∏ "–≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å"
                        if '.' in content:
                            day, month, year = match
                            return datetime(int(year), int(month), int(day))
                        else:
                            year, month, day = match
                            return datetime(int(year), int(month), int(day))
            except (ValueError, KeyError):
                continue
                
    return None


def is_content_fresh(content: str, max_age_days: int = 3) -> tuple[bool, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–µ–∂–∏–π –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏
    
    Args:
        content: –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        max_age_days: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–Ω—è—Ö
        
    Returns:
        (is_fresh, reason) - —Å–≤–µ–∂–∞—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∏ –ø—Ä–∏—á–∏–Ω–∞
    """
    extracted_date = extract_date_from_content(content)
    
    if not extracted_date:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    
    now = datetime.now()
    age = (now - extracted_date).days
    
    if age < 0:
        return True, f"–ë—É–¥—É—â–∞—è –¥–∞—Ç–∞ (–≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É {extracted_date.strftime('%d.%m.%Y')})"
    elif age <= max_age_days:
        return True, f"–°–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å ({age} –¥–Ω. –Ω–∞–∑–∞–¥, {extracted_date.strftime('%d.%m.%Y')})"
    else:
        return False, f"–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –Ω–æ–≤–æ—Å—Ç—å ({age} –¥–Ω. –Ω–∞–∑–∞–¥, {extracted_date.strftime('%d.%m.%Y')})"


def get_date_feedback_for_next_prompt(content: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity
    
    Args:
        content: –¢–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
        
    Returns:
        –¢–µ–∫—Å—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    """
    is_fresh, reason = is_content_fresh(content)
    
    if not is_fresh:
        return f"""
–ü–†–û–ë–õ–ï–ú–ê –° –ü–†–ï–î–´–î–£–©–ò–ú –†–ï–ó–£–õ–¨–¢–ê–¢–û–ú: {reason}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –î–õ–Ø –ù–û–í–û–ì–û –ü–û–ò–°–ö–ê:
- –ò—â–∏ –¢–û–õ–¨–ö–û –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 –¥–Ω—è
- –ü—Ä–æ–≤–µ—Ä—è–π –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
- –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π - –ª—É—á—à–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ
        """
    else:
        return "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç."


if __name__ == "__main__":
    # –¢–µ—Å—Ç –º–æ–¥—É–ª—è
    test_content = """üìú –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –ñ–ö–£ ‚Äî —Ä–æ—Å—Ç –Ω–∞ 11,9% —Å –∏—é–ª—è

üí¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö–ê–†–ú–ê–ù–ù–û–ì–û –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê:

–° 1 –∏—é–ª—è 2025 –≥–æ–¥–∞ —Ä–æ—Å—Å–∏—è–Ω –∂–¥–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π ¬´–ø–æ–¥–∞—Ä–æ–∫¬ª ‚Äî —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ –∂–∏–ª–∏—â–Ω–æ-–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 11,9%."""
    
    print("üîç –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¢–û–†–ê –î–ê–¢")
    print("=" * 40)
    
    extracted = extract_date_from_content(test_content)
    print(f"üìÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {extracted}")
    
    is_fresh, reason = is_content_fresh(test_content)
    print(f"üîÑ –°–≤–µ–∂–µ—Å—Ç—å: {is_fresh}")
    print(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    
    feedback = get_date_feedback_for_next_prompt(test_content)
    print(f"\nüí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n{feedback}")