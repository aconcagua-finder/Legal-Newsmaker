#!/usr/bin/env python3
"""
Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ NEWSMAKER (–≤–µ—Ä—Å–∏—è –¥–ª—è GitHub)

–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
"""

import json
import os
import copy
from pathlib import Path
from datetime import datetime
from flask import Flask, render_template, request, jsonify, flash, redirect, url_for
from flask_cors import CORS
from typing import Dict, Any, List
from loguru import logger
import hashlib
import secrets

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from timezone_utils import now_msk

app = Flask(__name__)
app.secret_key = secrets.token_hex(32)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
CORS(app)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = Path("config_web.json")
DEFAULT_CONFIG_FILE = Path("config_defaults.json")
PROMPTS_FILE = Path("prompts_custom.json")
ENV_FILE = Path(".env")

# –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEFAULT_CONFIG = {
    "api_models": {
        "perplexity": {
            "model": "sonar-deep-research",
            "available_models": [
                "sonar",
                "sonar-pro", 
                "sonar-reasoning",
                "sonar-reasoning-pro",
                "sonar-deep-research"
            ],
            "max_tokens": 8192,
            "temperature": 0.7,
            "top_p": 0.9,
            "timeout": 300
        },
        "openai": {
            "model": "gpt-image-1",  # –°–∞–º–∞—è –Ω–æ–≤–∞—è –∏ –∫—Ä—É—Ç–∞—è –º–æ–¥–µ–ª—å
            "available_models": [
                "dall-e-2",
                "dall-e-3",
                "gpt-image-1"
            ],
            "image_quality": "standard",
            "quality_options": ["standard", "hd"],
            "image_style": "vivid",
            "style_options": ["vivid", "natural"],
            "image_size": "1024x1024",
            "size_options": ["1024x1024", "1024x1792", "1792x1024"],
            "timeout": 120
        }
    },
    "schedule": {
        "collection_time": "08:30",
        "publication_times": [
            "09:05",
            "11:03", 
            "13:07",
            "15:09",
            "17:05",
            "19:02",
            "21:07"
        ],
        "timezone": "Europe/Moscow"
    },
    "content": {
        "max_news_per_day": 7,
        "min_content_length": 50,
        "max_content_length": 1500,
        "similarity_threshold": 0.7,
        "news_priorities": [
            "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û",
            "–û–ß–ï–ù–¨ –í–ê–ñ–ù–û",
            "–í–ê–ñ–ù–û",
            "–°–†–ï–î–ù–Ø–Ø –í–ê–ñ–ù–û–°–¢–¨",
            "–£–ú–ï–†–ï–ù–ù–ê–Ø –í–ê–ñ–ù–û–°–¢–¨",
            "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø",
            "–ù–ò–ó–ö–ê–Ø –í–ê–ñ–ù–û–°–¢–¨"
        ]
    },
    "telegram": {
        "max_message_length": 4096,
        "max_caption_length": 1024,
        "parse_mode": "HTML"
    },
    "storage": {
        "max_news_files": 30,
        "max_history_items": 15,
        "max_history_days": 7,
        "data_dir": "data",
        "logs_dir": "logs"
    },
    "retry": {
        "max_retries": 3,
        "retry_delay": 60,
        "exponential_backoff": True
    },
    "monitoring": {
        "log_level": "INFO",
        "debug_mode": False,
        "test_mode": False
    }
}

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
DEFAULT_PROMPTS = {
    "perplexity_system": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–ø—Ä–∞–∫—Ç–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏.",
    "perplexity_collection": """–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–±–µ—Ä–∏ –í–°–ï –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –∑–∞ –í–ß–ï–†–ê.

üéØ –ó–ê–î–ê–ß–ê: –ù–∞–π–¥–∏ –†–û–í–ù–û 7 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –∏ —Ä–∞–Ω–∂–∏—Ä—É–π –∏—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–ê–ñ–î–û–ô –ù–û–í–û–°–¢–ò:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã: —Å—É–º–º—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —Å—Ä–æ–∫–∏, –¥–∞—Ç—ã
- –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–≥–æ –∏–º–µ–Ω–Ω–æ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω/–±–∏–∑–Ω–µ—Å–∞
- –¢–æ—á–Ω–∞—è –¥–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏—è
- –ú–∏–Ω–∏–º—É–º 2-3 –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞

–°–¢–ò–õ–¨:
- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å –ª–µ–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π
- –ñ–∏–≤–æ–π —è–∑—ã–∫, –∫–∞–∫ –±—É–¥—Ç–æ –ø–∏—à–µ—Ç –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–∞–∫—Ç–∏–∫
- 1-2 —ç–º–æ–¥–∑–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å (—É–º–µ—Ä–µ–Ω–Ω–æ!)
- –ö–∞–∂–¥–∞—è –Ω–æ–≤–æ—Å—Ç—å 100-150 —Å–ª–æ–≤""",
    "openai_comic": """Create a 4-panel comic strip about Russian legal news:
    
STYLE: Realistic style, photographic quality

4-PANEL LAYOUT:
Panel 1: Setup - Character discovers the legal change
Panel 2: Reaction - Character processes the information
Panel 3: Understanding - Character realizes the implications
Panel 4: Resolution - Character adapts to new reality"""
}


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.config = self.load_config()
        self.prompts = self.load_prompts()
        self.api_keys = self.load_api_keys()
        self.history = []
        self.max_history = 10
        
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é"""
        if CONFIG_FILE.exists():
            try:
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # –ú–µ—Ä–∂–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
                    return self._merge_configs(DEFAULT_CONFIG, config)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return copy.deepcopy(DEFAULT_CONFIG)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.save_defaults()
            return copy.deepcopy(DEFAULT_CONFIG)
    
    def load_prompts(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã"""
        if PROMPTS_FILE.exists():
            try:
                with open(PROMPTS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
                return copy.deepcopy(DEFAULT_PROMPTS)
        return copy.deepcopy(DEFAULT_PROMPTS)
    
    def load_api_keys(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        keys = {}
        if ENV_FILE.exists():
            try:
                with open(ENV_FILE, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            key = key.strip()
                            value = value.strip().strip('"').strip("'")
                            if key in ['PERPLEXITY_API_KEY', 'OPENAI_API_KEY', 
                                      'TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHANNEL_ID']:
                                keys[key] = value
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
        
        # –î–ª—è GitHub –≤–µ—Ä—Å–∏–∏ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
        return keys
    
    def save_api_keys(self, api_keys: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
            env_content = []
            existing_keys = set()
            
            if ENV_FILE.exists():
                with open(ENV_FILE, 'r', encoding='utf-8') as f:
                    for line in f:
                        line_stripped = line.strip()
                        if line_stripped and '=' in line_stripped:
                            key = line_stripped.split('=', 1)[0].strip()
                            if key in ['PERPLEXITY_API_KEY', 'OPENAI_API_KEY', 
                                      'TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHANNEL_ID']:
                                existing_keys.add(key)
                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ –ø–æ–∑–∂–µ
                                continue
                        env_content.append(line)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
            key_mapping = {
                'perplexity': 'PERPLEXITY_API_KEY',
                'openai': 'OPENAI_API_KEY',
                'telegram_bot': 'TELEGRAM_BOT_TOKEN',
                'telegram_channel': 'TELEGRAM_CHANNEL_ID'
            }
            
            for short_key, env_key in key_mapping.items():
                if short_key in api_keys and api_keys[short_key]:
                    env_content.append(f'{env_key}="{api_keys[short_key]}"\n')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            with open(ENV_FILE, 'w', encoding='utf-8') as f:
                f.writelines(env_content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.api_keys = self.load_api_keys()
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–µ–π: {e}")
            return False
    
    def _merge_configs(self, default: Dict, custom: Dict) -> Dict:
        """–ú–µ—Ä–∂–∏—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π"""
        result = copy.deepcopy(default)
        
        def merge_dicts(d1, d2):
            for key, value in d2.items():
                if key in d1:
                    if isinstance(d1[key], dict) and isinstance(value, dict):
                        merge_dicts(d1[key], value)
                    else:
                        d1[key] = value
                else:
                    d1[key] = value
        
        merge_dicts(result, custom)
        return result
    
    def save_config(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_history()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Python
            self._update_python_configs()
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def save_prompts(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã"""
        try:
            with open(PROMPTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.prompts, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
            return False
    
    def save_defaults(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        with open(DEFAULT_CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(DEFAULT_CONFIG, f, ensure_ascii=False, indent=2)
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(DEFAULT_CONFIG, f, ensure_ascii=False, indent=2)
    
    def reset_to_defaults(self, section: str = None) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º"""
        try:
            if section:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
                if section in DEFAULT_CONFIG:
                    self.config[section] = copy.deepcopy(DEFAULT_CONFIG[section])
                elif section == "prompts":
                    self.prompts = copy.deepcopy(DEFAULT_PROMPTS)
                    self.save_prompts()
            else:
                # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
                self.config = copy.deepcopy(DEFAULT_CONFIG)
                self.prompts = copy.deepcopy(DEFAULT_PROMPTS)
                self.save_prompts()
            
            return self.save_config()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def add_to_history(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        snapshot = {
            "timestamp": now_msk().isoformat(),
            "config": copy.deepcopy(self.config),
            "prompts": copy.deepcopy(self.prompts)
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        config_hash = hashlib.md5(
            json.dumps(snapshot["config"], sort_keys=True).encode()
        ).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if not self.history or self.history[-1].get("hash") != config_hash:
            snapshot["hash"] = config_hash
            self.history.append(snapshot)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.history) > self.max_history:
                self.history = self.history[-self.max_history:]
    
    def restore_from_history(self, index: int) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            if 0 <= index < len(self.history):
                snapshot = self.history[index]
                self.config = copy.deepcopy(snapshot["config"])
                self.prompts = copy.deepcopy(snapshot["prompts"])
                self.save_prompts()
                return self.save_config()
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return False
    
    def _update_python_configs(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Python —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            config_updates = []
            
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            config_updates.append(f'PERPLEXITY_MODEL = "{self.config["api_models"]["perplexity"]["model"]}"')
            config_updates.append(f'PERPLEXITY_MAX_TOKENS = {self.config["api_models"]["perplexity"]["max_tokens"]}')
            config_updates.append(f'OPENAI_IMAGE_MODEL = "{self.config["api_models"]["openai"]["model"]}"')
            config_updates.append(f'OPENAI_IMAGE_QUALITY = "{self.config["api_models"]["openai"]["image_quality"]}"')
            config_updates.append(f'OPENAI_IMAGE_STYLE = "{self.config["api_models"]["openai"]["image_style"]}"')
            config_updates.append(f'OPENAI_IMAGE_SIZE = "{self.config["api_models"]["openai"]["image_size"]}"')
            
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            config_updates.append(f'COLLECTION_TIME = "{self.config["schedule"]["collection_time"]}"')
            config_updates.append(f'PUBLICATION_SCHEDULE = {json.dumps(self.config["schedule"]["publication_times"])}')
            
            # –õ–∏–º–∏—Ç—ã
            config_updates.append(f'MAX_NEWS_PER_DAY = {self.config["content"]["max_news_per_day"]}')
            config_updates.append(f'MIN_CONTENT_LENGTH = {self.config["content"]["min_content_length"]}')
            config_updates.append(f'MAX_CONTENT_LENGTH = {self.config["content"]["max_content_length"]}')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            updates_file = Path("config_updates.py")
            with open(updates_file, 'w', encoding='utf-8') as f:
                f.write("# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n")
                f.write("# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ config.py –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n")
                for update in config_updates:
                    f.write(f"{update}\n")
            
            logger.info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª config_updates.py —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Python –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def validate_config(self) -> Dict[str, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        errors = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        if not self.api_keys.get('PERPLEXITY_API_KEY'):
            warnings.append("API –∫–ª—é—á Perplexity –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not self.api_keys.get('OPENAI_API_KEY'):
            warnings.append("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not self.api_keys.get('TELEGRAM_BOT_TOKEN'):
            warnings.append("Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not self.api_keys.get('TELEGRAM_CHANNEL_ID'):
            warnings.append("Telegram Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
        perplexity_model = self.config["api_models"]["perplexity"]["model"]
        if perplexity_model not in self.config["api_models"]["perplexity"]["available_models"]:
            warnings.append(f"–ú–æ–¥–µ–ª—å Perplexity '{perplexity_model}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        openai_model = self.config["api_models"]["openai"]["model"]
        if openai_model not in self.config["api_models"]["openai"]["available_models"]:
            warnings.append(f"–ú–æ–¥–µ–ª—å OpenAI '{openai_model}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = self.config["schedule"]["publication_times"]
        if len(schedule) != self.config["content"]["max_news_per_day"]:
            warnings.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º—ë–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ({len(schedule)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å max_news_per_day ({self.config['content']['max_news_per_day']})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        for time_str in schedule:
            try:
                datetime.strptime(time_str, "%H:%M")
            except ValueError:
                errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if self.config["content"]["min_content_length"] >= self.config["content"]["max_content_length"]:
            errors.append("min_content_length –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ max_content_length")
        
        return {"errors": errors, "warnings": warnings}


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_manager = ConfigManager()


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    validation = config_manager.validate_config()
    return render_template('config.html', 
                         config=config_manager.config,
                         prompts=config_manager.prompts,
                         validation=validation)


@app.route('/api/config', methods=['GET'])
def get_config():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    # –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    masked_keys = {}
    for key, value in config_manager.api_keys.items():
        if value:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞
            if len(value) > 8:
                masked_keys[key] = value[:4] + '*' * (len(value) - 8) + value[-4:]
            else:
                masked_keys[key] = '*' * len(value)
        else:
            masked_keys[key] = ''
    
    return jsonify({
        "config": config_manager.config,
        "prompts": config_manager.prompts,
        "api_keys": masked_keys,
        "validation": config_manager.validate_config()
    })


@app.route('/api/config', methods=['POST'])
def update_config():
    """API endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        data = request.json
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if 'config' in data:
            config_manager.config = data['config']
        
        if 'prompts' in data:
            config_manager.prompts = data['prompts']
            config_manager.save_prompts()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º API –∫–ª—é—á–∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
        if 'api_keys' in data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∏ –Ω–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
            clean_keys = {}
            for key, value in data['api_keys'].items():
                if value and '*' not in value:  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
                    clean_keys[key] = value
            
            if clean_keys:
                config_manager.save_api_keys(clean_keys)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if config_manager.save_config():
            return jsonify({
                "success": True,
                "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
                "validation": config_manager.validate_config()
            })
        else:
            return jsonify({
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            }), 500
            
    except Exception as e:
        return jsonify({
            "success": False,
            "message": str(e)
        }), 400


@app.route('/api/reset', methods=['POST'])
def reset_config():
    """API endpoint –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    try:
        section = request.json.get('section')
        
        if config_manager.reset_to_defaults(section):
            return jsonify({
                "success": True,
                "message": f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {'—Å–µ–∫—Ü–∏–∏ ' + section if section else '–ø–æ–ª–Ω–æ—Å—Ç—å—é'} —Å–±—Ä–æ—à–µ–Ω—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º",
                "config": config_manager.config,
                "prompts": config_manager.prompts
            })
        else:
            return jsonify({
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            }), 500
            
    except Exception as e:
        return jsonify({
            "success": False,
            "message": str(e)
        }), 400


@app.route('/api/history', methods=['GET'])
def get_history():
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    return jsonify({
        "history": config_manager.history,
        "current_index": len(config_manager.history) - 1
    })


@app.route('/api/restore', methods=['POST'])
def restore_from_history():
    """API endpoint –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        index = request.json.get('index', -1)
        
        if config_manager.restore_from_history(index):
            return jsonify({
                "success": True,
                "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏",
                "config": config_manager.config,
                "prompts": config_manager.prompts
            })
        else:
            return jsonify({
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
            }), 500
            
    except Exception as e:
        return jsonify({
            "success": False,
            "message": str(e)
        }), 400


@app.route('/api/export', methods=['GET'])
def export_config():
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ JSON"""
    return jsonify({
        "config": config_manager.config,
        "prompts": config_manager.prompts,
        "timestamp": now_msk().isoformat()
    })


@app.route('/api/import', methods=['POST'])
def import_config():
    """–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON"""
    try:
        data = request.json
        
        if 'config' in data:
            config_manager.config = data['config']
        
        if 'prompts' in data:
            config_manager.prompts = data['prompts']
            config_manager.save_prompts()
        
        if config_manager.save_config():
            return jsonify({
                "success": True,
                "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞"
            })
        else:
            return jsonify({
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            }), 500
            
    except Exception as e:
        return jsonify({
            "success": False,
            "message": str(e)
        }), 400


def main():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    logger.info("üìç –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Path("templates").mkdir(exist_ok=True)
    Path("static").mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(debug=True, host='0.0.0.0', port=5000)


if __name__ == "__main__":
    main()