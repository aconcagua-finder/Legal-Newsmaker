/**
 * Fast Icon System for NEWSMAKER - –ë–ï–ó –í–ù–ï–®–ù–ò–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ Font Awesome, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
 */

class FastIconSystem {
    constructor() {
        // –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ–¥–∑–∏ –Ω–∞ Font Awesome –∏–∫–æ–Ω–∫–∏
        this.iconMap = {
            '‚öôÔ∏è': 'fa-gear',
            'üîß': 'fa-wrench',
            'üöÄ': 'fa-rocket',
            'üìä': 'fa-chart-bar',
            'üìù': 'fa-file-text',
            'üí¨': 'fa-comment',
            '‚è∞': 'fa-clock',
            'üíæ': 'fa-save',
            'üîç': 'fa-search',
            'üì∞': 'fa-newspaper',
            '‚ú®': 'fa-sparkles',
            'üé®': 'fa-palette',
            '‚úÖ': 'fa-circle-check',
            '‚ùå': 'fa-circle-xmark',
            'üéâ': 'fa-champagne-glasses',
            'üõë': 'fa-stop',
            '‚èπÔ∏è': 'fa-square',
            'üí•': 'fa-bolt',
            'üß™': 'fa-flask'
        };
        
        // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞ —Ü–≤–µ—Ç–∞
        this.colorMap = {
            '‚öôÔ∏è': 'icon-primary',
            'üöÄ': 'icon-success',
            'üìä': 'icon-info',
            '‚úÖ': 'icon-success',
            '‚ùå': 'icon-danger',
            '‚è∞': 'icon-warning',
            'üí•': 'icon-danger'
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init());
        } else {
            this.init();
        }
    }
    
    init() {
        // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.replacePageTitle();
        
        // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        this.replaceAllEmojis();
    }
    
    replacePageTitle() {
        // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –≤ title
        const title = document.querySelector('title');
        if (title && title.textContent.includes('‚öôÔ∏è')) {
            title.textContent = title.textContent.replace('‚öôÔ∏è', '');
        }
    }
    
    createIcon(emoji) {
        const faClass = this.iconMap[emoji];
        const colorClass = this.colorMap[emoji] || 'icon-primary';
        
        if (!faClass) return emoji;
        
        // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –∏–∫–æ–Ω–∫–∏
        const icon = document.createElement('i');
        icon.className = `fas ${faClass} icon ${colorClass}`;
        return icon;
    }
    
    replaceAllEmojis() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã
        const walker = document.createTreeWalker(
            document.body,
            NodeFilter.SHOW_TEXT,
            {
                acceptNode: (node) => {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
                    const parent = node.parentElement;
                    if (parent && (parent.tagName === 'SCRIPT' || parent.tagName === 'STYLE')) {
                        return NodeFilter.FILTER_REJECT;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏
                    for (const emoji of Object.keys(this.iconMap)) {
                        if (node.textContent.includes(emoji)) {
                            return NodeFilter.FILTER_ACCEPT;
                        }
                    }
                    return NodeFilter.FILTER_REJECT;
                }
            }
        );
        
        const nodesToReplace = [];
        while (walker.nextNode()) {
            nodesToReplace.push(walker.currentNode);
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –∏–∫–æ–Ω–∫–∏
        nodesToReplace.forEach(node => {
            const parent = node.parentElement;
            let text = node.textContent;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–º–æ–¥–∑–∏
            for (const [emoji, faClass] of Object.entries(this.iconMap)) {
                if (text.includes(emoji)) {
                    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —ç–º–æ–¥–∑–∏
                    const parts = text.split(emoji);
                    
                    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    const container = document.createElement('span');
                    
                    parts.forEach((part, index) => {
                        if (part) {
                            container.appendChild(document.createTextNode(part));
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
                        if (index < parts.length - 1) {
                            const icon = this.createIcon(emoji);
                            if (icon instanceof HTMLElement) {
                                container.appendChild(icon);
                            } else {
                                container.appendChild(document.createTextNode(icon));
                            }
                        }
                    });
                    
                    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    parent.replaceChild(container, node);
                    break;
                }
            }
        });
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫
    addIcon(element, iconName, options = {}) {
        const { size = 'md', color = 'primary', animation = '' } = options;
        
        const icon = document.createElement('i');
        icon.className = `fas fa-${iconName} icon icon-${size} icon-${color} ${animation}`;
        
        element.appendChild(icon);
        return icon;
    }
    
    createStatusIcon(status, text) {
        const statusIcons = {
            'success': 'circle-check',
            'error': 'circle-xmark',
            'warning': 'triangle-exclamation',
            'info': 'circle-info',
            'loading': 'spinner'
        };
        
        const statusColors = {
            'success': 'success',
            'error': 'danger',
            'warning': 'warning',
            'info': 'info',
            'loading': 'primary'
        };
        
        const iconName = statusIcons[status] || 'circle-info';
        const color = statusColors[status] || 'info';
        const animation = status === 'loading' ? 'icon-spin' : '';
        
        const container = document.createElement('div');
        container.className = `status-icon status-${status}`;
        container.innerHTML = `
            <i class="fas fa-${iconName} icon icon-${color} ${animation}"></i>
            <span>${text}</span>
        `;
        
        return container;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const iconSystem = new FastIconSystem();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.FastIconSystem = FastIconSystem;
window.iconSystem = iconSystem;