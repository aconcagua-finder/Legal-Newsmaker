import schedule
import time
from datetime import datetime
from typing import Optional
from loguru import logger

from perplexity_client import PerplexityClient
from telegram_client import TelegramClient
from openai_client import OpenAIClient
from news_scheduler import NewsmakerScheduler as NewNewsmakerScheduler
import config


class LegacyNewsmakerScheduler:
    """LEGACY: –°—Ç–∞—Ä—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.perplexity_client = PerplexityClient()
        self.telegram_client = TelegramClient()
        self.openai_client = OpenAIClient()
        self.is_running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.max_retries = 3
        self.retry_delay = 30  # 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    def _log_job_start(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        now = datetime.now()
        logger.info("=" * 50)
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {now.strftime('%d.%m.%Y %H:%M:%S')}")
        logger.info("=" * 50)
    
    def _log_job_end(self, success: bool):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        now = datetime.now()
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        logger.info("=" * 50)
        logger.info(f"{status} –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {now.strftime('%d.%m.%Y %H:%M:%S')}")
        logger.info("=" * 50)
    
    def _get_legal_updates_with_retry(self) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Returns:
            dict: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        for attempt in range(1, self.max_retries + 1):
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π #{attempt}/{self.max_retries}")
            
            try:
                updates = self.perplexity_client.get_legal_updates()
                
                if updates:
                    logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    return updates
                else:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ #{attempt} –Ω–µ—É–¥–∞—á–Ω–∞ - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ #{attempt}: {e}")
            
            # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if attempt < self.max_retries:
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {self.retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(self.retry_delay)
        
        logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return None
    
    def _send_to_telegram_with_retry(self, data: dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        for attempt in range(1, self.max_retries + 1):
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram #{attempt}/{self.max_retries}")
            
            try:
                success = self.telegram_client.send_legal_update(data)
                
                if success:
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ #{attempt} –Ω–µ—É–¥–∞—á–Ω–∞")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ø—ã—Ç–∫–∞ #{attempt}: {e}")
            
            # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if attempt < self.max_retries:
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {self.retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(self.retry_delay)
        
        logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return False
    
    def _send_to_telegram_with_comic_retry(self, data: dict, image_bytes: bytes) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∏–∫—Å–æ–º –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            image_bytes: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∏–∫—Å–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        for attempt in range(1, self.max_retries + 1):
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∫–æ–º–∏–∫—Å–æ–º –≤ Telegram #{attempt}/{self.max_retries}")
            
            try:
                success = self.telegram_client.send_legal_update_with_comic(data, image_bytes)
                
                if success:
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∏–∫—Å–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∫–æ–º–∏–∫—Å–æ–º #{attempt} –Ω–µ—É–¥–∞—á–Ω–∞")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å –∫–æ–º–∏–∫—Å–æ–º –ø–æ–ø—ã—Ç–∫–∞ #{attempt}: {e}")
            
            # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if attempt < self.max_retries:
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {self.retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(self.retry_delay)
        
        logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∫–æ–º–∏–∫—Å–æ–º –≤ Telegram –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return False
    
    def run_daily_job(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É"""
        self._log_job_start()
        
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Perplexity
            logger.info("üì° –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            updates = self._get_legal_updates_with_retry()
            
            if not updates:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Perplexity API")
                self._log_job_end(False)
                return
            
            content = updates.get('content', '')
            sources = updates.get('sources', [])
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–æ–π {len(content)} —Å–∏–º–≤–æ–ª–æ–≤, –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
            
            # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∏–∫—Å
            logger.info("üé® –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∏–∫—Å–∞...")
            comic_image = self.openai_client.generate_comic_image(content)
            
            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            logger.info("üì± –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∫–∞–Ω–∞–ª...")
            if comic_image:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å –∫–æ–º–∏–∫—Å–æ–º")
                success = self._send_to_telegram_with_comic_retry(updates, comic_image)
            else:
                logger.warning("–ö–æ–º–∏–∫—Å –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                success = self._send_to_telegram_with_retry(updates)
            
            if success:
                logger.info("üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                self._log_job_end(True)
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
                self._log_job_end(False)
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
            self._log_job_end(False)
    
    def test_components(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
        """
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –¢–µ—Å—Ç Perplexity API
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Perplexity API...")
        perplexity_ok = self.perplexity_client.test_connection()
        
        if perplexity_ok:
            logger.info("‚úÖ Perplexity API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.error("‚ùå Perplexity API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç Telegram API (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API...")
        try:
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            telegram_ok = loop.run_until_complete(self.telegram_client.test_connection())
            loop.close()
            
            if telegram_ok:
                logger.info("‚úÖ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.error("‚ùå Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram: {e}")
            telegram_ok = False
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        all_ok = perplexity_ok and telegram_ok
        
        if all_ok:
            logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
        return all_ok
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        schedule.clear()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
        schedule.every(config.HOURLY_INTERVAL).hours.do(self.run_daily_job)
        
        logger.info(f"üìÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∂–¥—ã–µ {config.HOURLY_INTERVAL} —á–∞—Å–∞")
        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {schedule.next_run()}")
    
    def run_once_now(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        logger.info("üöÄ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏...")
        self.run_daily_job()
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ"""
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.setup_schedule()
        self.is_running = True
        
        logger.info("üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            self.stop_scheduler()
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            self.stop_scheduler()
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        schedule.clear()
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# =============================================================================
# –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê - Wrapper –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
# =============================================================================

class NewsmakerSchedulerWrapper:
    """
    Wrapper –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    """
    
    def __init__(self, use_new_architecture: bool = True):
        self.use_new_architecture = use_new_architecture
        
        if use_new_architecture:
            logger.info("üÜï –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
            self.scheduler = NewNewsmakerScheduler()
        else:
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è legacy –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
            self.scheduler = LegacyNewsmakerScheduler()
    
    def test_components(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        return self.scheduler.test_components()
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.use_new_architecture:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            logger.info("üìã –†–µ–∂–∏–º: —Å–±–æ—Ä —É—Ç—Ä–æ–º + –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        
        self.scheduler.start_scheduler()
    
    def run_once_now(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –æ–¥–∏–Ω —Ä–∞–∑"""
        if self.use_new_architecture:
            logger.info("üõ†Ô∏è –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
            # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º–æ–∂–µ–º –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –∑–∞–ø—É—Å–∫–∞—Ç—å
            self.scheduler.run_manual_publication()
        else:
            self.scheduler.run_once_now()
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler.stop_scheduler()


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º wrapper –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
NewsmakerScheduler = NewsmakerSchedulerWrapper 