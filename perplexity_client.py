import requests
import json
import re
from datetime import datetime, timedelta
from typing import Optional, Tuple, List
from loguru import logger

import config


class PerplexityClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Perplexity API (–º–æ–¥–µ–ª—å Sonar-pro)"""
    
    def __init__(self):
        self.api_key = config.PERPLEXITY_API_KEY
        self.api_url = config.PERPLEXITY_API_URL
        self.timeout = config.REQUEST_TIMEOUT
        
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
    
    def _get_yesterday_date(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å –º–µ—Å—è—Ü'"""
        yesterday = datetime.now() - timedelta(days=1)
        months = {
            1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
            5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 
            9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
        }
        
        day = yesterday.day
        month = months[yesterday.month]
        return f"{day} {month}"
    
    def _create_prompt(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
        yesterday_date = self._get_yesterday_date()
        
        prompt = f"""–ù–∞–π–¥–∏ –û–î–ù–û –≥–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –∑–∞ {yesterday_date}.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò–∑—É—á–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –Ω–∞–π–¥–∏ –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ü–∏—Ñ—Ä—ã: —Å—É–º–º—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —Å—Ä–æ–∫–∏
- –ù–ï –ø–∏—à–∏ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú (–º–∞–∫—Å–∏–º—É–º 100-120 —Å–ª–æ–≤)
- –°—Ç–∏–ª—å: —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å –ª–µ–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π, –ë–ï–ó –ø—É–±–ª–∏—Ü–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –ü–†–û –°–°–´–õ–ö–ò:
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å—Ç–∞–≤—å [1] –ø–æ—Å–ª–µ –ö–ê–ñ–î–û–ì–û —Ñ–∞–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
- –í –∑–∞–≥–æ–ª–æ–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å [1]
- –í –ø–µ—Ä–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å [1]
- –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—à—å —Ñ–∞–∫—Ç –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ - —Å—Ç–∞–≤—å [1] –∏–ª–∏ [2] —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ñ–∞–∫—Ç–∞
- –ü—Ä–∏–º–µ—Ä: "–° 1 –∏—é–Ω—è —à—Ç—Ä–∞—Ñ —Å–æ—Å—Ç–∞–≤–∏—Ç 5000 —Ä—É–±–ª–µ–π [1]"

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

üìú –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω ‚Ññ123-–§–ó [1] - —à—Ç—Ä–∞—Ñ—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –≤–¥–≤–æ–µ

üí¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö–ê–†–ú–ê–ù–ù–û–ì–û –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê:

–° 1 –∏—é–Ω—è –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É –∑–∞–∫–æ–Ω –æ–± —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–æ–≤ –¥–æ 5000 —Ä—É–±–ª–µ–π [1]. 

–ó–∞—Ç—Ä–æ–Ω–µ—Ç –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç–æ–≤ - –ø—Ä–∏–¥–µ—Ç—Å—è –ø–ª–∞—Ç–∏—Ç—å –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ [1].

–í–∏–¥–∏–º–æ, –±—é–¥–∂–µ—Ç—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏, –∞ –≥—Ä–∞–∂–¥–∞–Ω–µ - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∑–Ω—ã üí∞

–ò–°–¢–û–ß–ù–ò–ö–ò:
üîó –ò—Å—Ç–æ—á–Ω–∏–∫: https://sozd.duma.gov.ru/bill/123456-8
üîó –ò—Å—Ç–æ—á–Ω–∏–∫: https://pravo.gov.ru/proxy/ips/?docbody=123456

–í–ê–ñ–ù–û: 
- –ü–∏—à–∏ –∫–∞–∫ —é—Ä–∏—Å—Ç-–ø—Ä–∞–∫—Ç–∏–∫, –∞ –ù–ï –∂—É—Ä–Ω–∞–ª–∏—Å—Ç
- –ú–∞–∫—Å–∏–º—É–º 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞
- –ë–ï–ó –°–°–´–õ–û–ö [1] –û–¢–í–ï–¢ –ù–ï –ü–†–ò–ù–ò–ú–ê–ï–¢–°–Ø!"""

        return prompt
    
    def _extract_sources_from_content(self, content: str) -> Tuple[str, List[str]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–∞–º–∏ + —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
        
        Args:
            content: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
            
        Returns:
            Tuple[str, List[str]]: (—Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø–æ –ø–æ—Ä—è–¥–∫—É)
        """
        sources = []
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –∏ —Å–µ–∫—Ü–∏—é —Å—Å—ã–ª–æ–∫
        lines = content.split('\n')
        main_content_lines = []
        sources_section_started = False
        
        for line in lines:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É "–ò–°–¢–û–ß–ù–ò–ö–ò:" –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–µ–∫—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if line.strip().upper() == '–ò–°–¢–û–ß–ù–ò–ö–ò:' or line.strip().upper().startswith('–ò–°–¢–û–ß–ù–ò–ö'):
                sources_section_started = True
                # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                continue
                
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: "üîó –ò—Å—Ç–æ—á–Ω–∏–∫: https://...")
            if line.strip().startswith('üîó'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "üîó –ò—Å—Ç–æ—á–Ω–∏–∫: https://—Å—Å—ã–ª–∫–∞ [1]"
                url_match = re.search(r'https?://[^\s\[\]]+', line)
                if url_match:
                    source_url = url_match.group().rstrip('.,;:')
                    sources.append(source_url)
                # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —É–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                continue
                
            # –¢–∞–∫–∂–µ –∏—â–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ–∫—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if re.match(r'^–°—Å—ã–ª–∫–∏:\s*$', line.strip(), re.IGNORECASE):
                sources_section_started = True
                continue
            
            if sources_section_started:
                # –í —Å–µ–∫—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ [–Ω–æ–º–µ—Ä] —Å—Å—ã–ª–∫–∞
                source_match = re.match(r'^\[(\d+)\]\s*(https?://[^\s]+)', line.strip())
                if source_match:
                    source_num = int(source_match.group(1))
                    source_url = source_match.group(2).rstrip('.,;:')
                    
                    # –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    while len(sources) < source_num:
                        sources.append('')
                    sources[source_num - 1] = source_url
            else:
                # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                main_content_lines.append(line)
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ sources
        sources = [s for s in sources if s]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        main_content = '\n'.join(main_content_lines).strip()
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        if not sources:
            url_pattern = r'https?://[^\s\)\]>]+'
            sources = re.findall(url_pattern, content)
            sources = list(set(sources))
            sources = [source.rstrip('.,;:') for source in sources]
            
            # –ï—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            if not sources and '[1]' in main_content:
                # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–≤
                bill_match = re.search(r'N\s*(\d+-\d+)', main_content)
                if bill_match:
                    bill_number = bill_match.group(1)
                    sources.append(f'https://sozd.duma.gov.ru/bill/{bill_number}')
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
                    sources.append('https://sozd.duma.gov.ru/')
                    
                logger.warning("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ, –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
        
        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        if sources:
            for i, source in enumerate(sources, 1):
                logger.debug(f"–ò—Å—Ç–æ—á–Ω–∏–∫ [{i}]: {source}")
        
        return main_content, sources
    
    def get_legal_updates(self) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        
        Returns:
            dict: {'content': str, 'sources': List[str]} –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            prompt = self._create_prompt()
            yesterday_date = self._get_yesterday_date()
            
            logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞ {yesterday_date}")
            
            payload = {
                "model": "sonar-pro",
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–ø—Ä–∞–∫—Ç–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                "max_tokens": 600,
                "temperature": 0.2,
                "top_p": 0.9
            }
            
            response = requests.post(
                self.api_url,
                headers=self.headers,
                json=payload,
                timeout=self.timeout
            )
            
            response.raise_for_status()
            
            data = response.json()
            raw_content = data['choices'][0]['message']['content']
            
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Perplexity API")
            logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI:\n{raw_content}\n---")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å—Å—ã–ª–æ–∫
            link_markers = re.findall(r'\[\d+\]', raw_content)
            if link_markers:
                logger.debug(f"–ù–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ: {link_markers}")
            else:
                logger.warning("–í —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã —Å—Å—ã–ª–æ–∫ [1], [2] –∏ —Ç.–¥.")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            content, sources = self._extract_sources_from_content(raw_content)
            
            # –ó–∞–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ [1], [2] –∏ —Ç.–¥. –ø–æ –ø–æ—Ä—è–¥–∫—É
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
            all_ref_numbers = sorted(set(int(m.group(1)) for m in re.finditer(r'\[(\d+)\]', content)))
            
            if all_ref_numbers:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {all_ref_numbers}")
                # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ
                ref_mapping = {old_num: new_num for new_num, old_num in enumerate(all_ref_numbers, 1)}
                
                # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
                for old_num, new_num in ref_mapping.items():
                    old_ref = f'[{old_num}]'
                    new_ref = f'[{new_num}]'
                    content = content.replace(old_ref, new_ref)
                    logger.debug(f"–ó–∞–º–µ–Ω–µ–Ω–æ {old_ref} –Ω–∞ {new_ref}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã
            link_markers = re.findall(r'\[\d+\]', content)
            if not link_markers and sources:
                logger.warning("–î–æ–±–∞–≤–ª—è—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã —Å—Å—ã–ª–æ–∫...")
                lines = content.split('\n')
                modified_lines = []
                
                for i, line in enumerate(lines):
                    if line.strip():
                        # –î–æ–±–∞–≤–ª—è–µ–º [1] –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        if line.strip().startswith('üìú') and '[1]' not in line:
                            line = line.rstrip() + ' [1]'
                            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω [1] –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É: {line}")
                        # –î–æ–±–∞–≤–ª—è–µ–º [1] –∫ –ø–µ—Ä–≤–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                        elif i > 0 and lines[i-1].strip().startswith('üí¨') and '[1]' not in line:
                            # –î–æ–±–∞–≤–ª—è–µ–º [1] –≤ –∫–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                            if '. ' in line:
                                first_sentence_end = line.find('. ')
                                line = line[:first_sentence_end] + ' [1]' + line[first_sentence_end:]
                            else:
                                line = line.rstrip() + ' [1]'
                            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω [1] –∫ –ø–µ—Ä–≤–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é: {line}")
                    
                    modified_lines.append(line)
                
                content = '\n'.join(modified_lines)
            
            return {
                'content': content,
                'sources': sources
            }
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Perplexity API: {e}")
            return None
            
        except KeyError as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {e}")
            return None
            
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API: {e}")
            return None
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            test_payload = {
                "model": "sonar-pro",
                "messages": [
                    {
                        "role": "user",
                        "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
                    }
                ],
                "max_tokens": 50
            }
            
            response = requests.post(
                self.api_url,
                headers=self.headers,
                json=test_payload,
                timeout=10
            )
            
            response.raise_for_status()
            logger.info("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Perplexity API –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False 