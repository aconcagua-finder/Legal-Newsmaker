#!/usr/bin/env python3
"""
News Publisher –¥–ª—è NEWSMAKER

–ú–æ–¥—É–ª—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
–ß–∏—Ç–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∏—Ö –≤ Telegram –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.
"""

import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional, Dict, List
from loguru import logger

import config
from telegram_client import TelegramClient
from openai_client import OpenAIClient


class NewsPublisher:
    """–ü—É–±–ª–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.telegram_client = TelegramClient()
        self.openai_client = OpenAIClient()
        self.data_dir = Path(config.DATA_DIR)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.max_publication_attempts = 3
        
    def _get_news_file_path(self, date: datetime) -> Path:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        
        Args:
            date: –î–∞—Ç–∞ —Ñ–∞–π–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
            
        Returns:
            Path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        date_str = date.strftime('%Y-%m-%d')
        filename = config.NEWS_FILE_PATTERN.format(date=date_str)
        return self.data_dir / filename
    
    def _load_news_file(self, date: datetime) -> Optional[Dict]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        
        Args:
            date: –î–∞—Ç–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        file_path = self._get_news_file_path(date)
        
        if not file_path.exists():
            logger.error(f"üìÇ –§–∞–π–ª –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path.name}")
            return None
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            logger.debug(f"üì∞ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file_path.name}")
            logger.debug(f"üìä –ù–æ–≤–æ—Å—Ç–µ–π –≤ —Ñ–∞–π–ª–µ: {len(data.get('news', []))}")
            
            return data
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
    
    def _save_news_file(self, data: Dict, date: datetime) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ñ–∞–π–ª
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            date: –î–∞—Ç–∞ —Ñ–∞–π–ª–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        file_path = self._get_news_file_path(date)
        
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üíæ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {file_path.name}")
            return True
            
        except Exception as e:
            logger.error(f"üíæ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def _format_news_for_telegram(self, news_item: Dict) -> Dict:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            news_item: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            Dict: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è telegram_client
        """
        title = news_item.get('title', '')
        content = news_item.get('content', '')
        sources = news_item.get('sources', [])
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç markdown –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ Deep Research
        cleaned_content = self._clean_deep_research_formatting(content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ üìú –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        if 'üìú' in cleaned_content:
            # –ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
            formatted_content = cleaned_content
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if title.startswith('üìú'):
                formatted_content = f"{title}\n\n{cleaned_content}"
            else:
                formatted_content = f"üìú {title}\n\n{cleaned_content}"
        
        return {
            'content': formatted_content,
            'sources': sources
        }
    
    def _clean_deep_research_formatting(self, content: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Deep Research
        
        Args:
            content: –°—ã—Ä–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        import re
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        content = re.sub(r'\*\*–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö–ê–†–ú–ê–ù–ù–û–ì–û –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê:\*\*', '–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö–ê–†–ú–ê–ù–ù–û–ì–û –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê:', content)
        
        # –£–±–∏—Ä–∞–µ–º *–ò—Ä–æ–Ω–∏—è:*, *–ù–∞–±–ª—é–¥–µ–Ω–∏–µ:* –∏ –ø–æ–¥–æ–±–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        content = re.sub(r'\*[–ê-–Ø][–∞-—è]+:\*\s*', '', content)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –∏ –Ω–∞—á–∞–ª–µ
        content = re.sub(r'\*\*\s*$', '', content)
        content = re.sub(r'^\*\*\s*', '', content)
        
        # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        content = re.sub(r'\n\s*\n\s*\n', '\n\n', content)
        
        # –£–±–∏—Ä–∞–µ–º trailing –ø—Ä–æ–±–µ–ª—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        content = '\n'.join(line.rstrip() for line in content.split('\n'))
        
        return content.strip()
    
    def _load_image_for_news(self, news_item: Dict) -> Optional[bytes]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            news_item: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            
        Returns:
            bytes: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        """
        image_path_str = news_item.get('image_path')
        if not image_path_str:
            logger.warning("üì∑ –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–æ–≤–æ—Å—Ç–∏")
            return None
        
        if not news_item.get('image_generated', False):
            logger.warning("üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return None
        
        image_path = Path(image_path_str)
        
        if not image_path.exists():
            logger.error(f"üì∑ –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            return None
        
        try:
            with open(image_path, 'rb') as f:
                image_bytes = f.read()
            
            logger.info(f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image_path.name} ({len(image_bytes)} –±–∞–π—Ç)")
            return image_bytes
            
        except Exception as e:
            logger.error(f"üì∑ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
            return None
    
    def _update_news_status(self, data: Dict, news_id: str, published: bool, 
                           attempt_count: Optional[int] = None) -> Dict:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
            news_id: ID –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            published: –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            attempt_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        for news_item in data.get('news', []):
            if news_item.get('id') == news_id:
                news_item['published'] = published
                if published:
                    news_item['published_at'] = datetime.now().isoformat()
                
                if attempt_count is not None:
                    news_item['publication_attempts'] = attempt_count
                    
                break
        
        return data
    
    def get_next_unpublished_news(self, date: Optional[datetime] = None) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—á–µ—Ä–∞)
            
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
        """
        if date is None:
            date = datetime.now() - timedelta(days=1)
        
        data = self._load_news_file(date)
        if not data:
            return None
        
        current_time = datetime.now()
        current_time_str = current_time.strftime('%H:%M')
        
        # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
        unpublished_news = []
        for news_item in data.get('news', []):
            if not news_item.get('published', False):
                scheduled_time = news_item.get('scheduled_time')
                if scheduled_time and scheduled_time <= current_time_str:
                    unpublished_news.append(news_item)
        
        if not unpublished_news:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–∏
        unpublished_news.sort(key=lambda x: (
            x.get('priority', 999),
            x.get('scheduled_time', '99:99')
        ))
        
        return {
            'file_date': date,
            'news_item': unpublished_news[0],
            'total_unpublished': len(unpublished_news)
        }
    
    def publish_news_item(self, news_data: Dict) -> bool:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å –≤ Telegram
        
        Args:
            news_data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        file_date = news_data['file_date']
        news_item = news_data['news_item']
        news_id = news_item.get('id', 'unknown')
        
        logger.info("=" * 50)
        logger.info(f"üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {news_id}")
        logger.info(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {news_item.get('priority', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è: {news_item.get('scheduled_time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        logger.info("=" * 50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        data = self._load_news_file(file_date)
        if not data:
            logger.error("üìÇ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–æ–≤–æ—Å—Ç–µ–π")
            return False
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        current_attempts = news_item.get('publication_attempts', 0) + 1
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
            telegram_data = self._format_news_for_telegram(news_item)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logger.info("üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            comic_image = self._load_image_for_news(news_item)
            
            # –ü—É–±–ª–∏–∫—É–µ–º
            logger.info("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
            if comic_image:
                success = self.telegram_client.send_legal_update_with_comic(
                    telegram_data, comic_image
                )
            else:
                logger.warning("üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                success = self.telegram_client.send_legal_update(telegram_data)
            
            if success:
                logger.info("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª–µ
                data = self._update_news_status(data, news_id, True, current_attempts)
                self._save_news_file(data, file_date)
                
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                data = self._update_news_status(data, news_id, False, current_attempts)
                self._save_news_file(data, file_date)
                
                return False
                
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            data = self._update_news_status(data, news_id, False, current_attempts)
            self._save_news_file(data, file_date)
            
            return False
        
        finally:
            logger.info("=" * 50)
    
    def publish_next_scheduled_news(self) -> Dict:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
        """
        logger.info("üîç –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        
        # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        news_data = self.get_next_unpublished_news()
        
        if not news_data:
            logger.info("üì∞ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            return {
                'success': False,
                'reason': 'no_news_ready',
                'message': '–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
            }
        
        news_item = news_data['news_item']
        scheduled_time = news_item.get('scheduled_time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        priority = news_item.get('priority', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        title = news_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        logger.info(f"üì∞ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        logger.info(f"  üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
        logger.info(f"  ‚è∞ –í—Ä–µ–º—è: {scheduled_time}")
        logger.info(f"  üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
        
        # –ü—É–±–ª–∏–∫—É–µ–º
        success = self.publish_news_item(news_data)
        
        if success:
            return {
                'success': True,
                'news_id': news_item.get('id'),
                'priority': priority,
                'scheduled_time': scheduled_time,
                'title': title,
                'remaining_news': news_data['total_unpublished'] - 1
            }
        else:
            return {
                'success': False,
                'reason': 'publication_failed',
                'news_id': news_item.get('id'),
                'attempts': news_item.get('publication_attempts', 0) + 1,
                'title': title
            }
    
    def get_publication_status(self, date: Optional[datetime] = None) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        
        Args:
            date: –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—á–µ—Ä–∞)
            
        Returns:
            Dict: –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        """
        if date is None:
            date = datetime.now() - timedelta(days=1)
        
        data = self._load_news_file(date)
        if not data:
            return {
                'date': date.strftime('%Y-%m-%d'),
                'file_exists': False,
                'error': '–§–∞–π–ª –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
        
        news_list = data.get('news', [])
        published_count = sum(1 for news in news_list if news.get('published', False))
        
        status = {
            'date': date.strftime('%Y-%m-%d'),
            'file_exists': True,
            'total_news': len(news_list),
            'published_count': published_count,
            'unpublished_count': len(news_list) - published_count,
            'collection_time': data.get('collected_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'news_details': []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        for i, news in enumerate(news_list, 1):
            detail = {
                'id': news.get('id', f'news_{i}'),
                'priority': news.get('priority', i),
                'scheduled_time': news.get('scheduled_time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                'published': news.get('published', False),
                'title': news.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50],
                'attempts': news.get('publication_attempts', 0)
            }
            
            if news.get('published'):
                detail['published_at'] = news.get('published_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            status['news_details'].append(detail)
        
        return status
    
    def force_publish_by_priority(self, priority: int, 
                                 date: Optional[datetime] = None) -> bool:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        
        Args:
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ (1-5)
            date: –î–∞—Ç–∞ —Ñ–∞–π–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—á–µ—Ä–∞)
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        if date is None:
            date = datetime.now() - timedelta(days=1)
        
        data = self._load_news_file(date)
        if not data:
            logger.error("üìÇ –§–∞–π–ª –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        target_news = None
        for news_item in data.get('news', []):
            if news_item.get('priority') == priority:
                target_news = news_item
                break
        
        if not target_news:
            logger.error(f"üì∞ –ù–æ–≤–æ—Å—Ç—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        if target_news.get('published', False):
            logger.warning(f"üì∞ –ù–æ–≤–æ—Å—Ç—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority} —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
            return False
        
        logger.info(f"üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}")
        
        news_data = {
            'file_date': date,
            'news_item': target_news,
            'total_unpublished': 1
        }
        
        return self.publish_news_item(news_data)
    
    def publish_all_news_for_testing(self, date: Optional[datetime] = None, interval: int = 6) -> Dict:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –í–°–ï –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            date: –î–∞—Ç–∞ —Ñ–∞–π–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—á–µ—Ä–∞)
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        if date is None:
            date = datetime.now() - timedelta(days=1)
        
        data = self._load_news_file(date)
        if not data:
            return {
                'success': False,
                'reason': 'file_not_found',
                'message': '–§–∞–π–ª –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        unpublished_news = []
        for news_item in data.get('news', []):
            if not news_item.get('published', False):
                unpublished_news.append(news_item)
        
        if not unpublished_news:
            return {
                'success': False,
                'reason': 'no_unpublished_news',
                'message': '–ù–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π'
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        unpublished_news.sort(key=lambda x: x.get('priority', 999))
        
        logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥—Ä—è–¥")
        logger.info(f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(unpublished_news)}")
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏: {interval} —Å–µ–∫")
        logger.info("=" * 60)
        
        results = []
        successful_count = 0
        
        for i, news_item in enumerate(unpublished_news, 1):
            priority = news_item.get('priority', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            title = news_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            logger.info(f"üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è {i}/{len(unpublished_news)}: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}")
            logger.info(f"üìã {title[:60]}...")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
            news_data = {
                'file_date': date,
                'news_item': news_item,
                'total_unpublished': len(unpublished_news)
            }
            
            success = self.publish_news_item(news_data)
            
            result = {
                'index': i,
                'priority': priority,
                'title': title,
                'success': success
            }
            results.append(result)
            
            if success:
                successful_count += 1
                logger.info(f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è {i}/{len(unpublished_news)} —É—Å–ø–µ—à–Ω–∞")
            else:
                logger.error(f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è {i}/{len(unpublished_news)} –Ω–µ—É–¥–∞—á–Ω–∞")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if i < len(unpublished_news):
                logger.info(f"‚è≥ –ü–∞—É–∑–∞ {interval} —Å–µ–∫—É–Ω–¥...")
                import time
                time.sleep(interval)
        
        logger.info("=" * 60)
        logger.info(f"üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:")
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_count}")
        logger.info(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {len(unpublished_news) - successful_count}")
        logger.info(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_count/len(unpublished_news)*100):.1f}%")
        
        return {
            'success': True,
            'total_news': len(unpublished_news),
            'successful_count': successful_count,
            'failed_count': len(unpublished_news) - successful_count,
            'success_rate': successful_count / len(unpublished_news) if unpublished_news else 0,
            'results': results
        }


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NewsPublisher...")
    
    publisher = NewsPublisher()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status = publisher.get_publication_status()
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {status}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å
    result = publisher.publish_next_scheduled_news()
    logger.info(f"üì∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {result}")


if __name__ == "__main__":
    main()