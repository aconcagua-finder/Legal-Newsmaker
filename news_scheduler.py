#!/usr/bin/env python3
"""
News Scheduler –¥–ª—è NEWSMAKER

–ù–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Å–±–æ—Ä–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:
- 08:30 –ú–°–ö - —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞
- 5 —Ä–∞–∑ –≤ –¥–µ–Ω—å - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
"""

import schedule
import time
from datetime import datetime
from typing import Optional
from loguru import logger

import config
from news_collector import NewsCollector
from news_publisher import NewsPublisher


class NewsmakerScheduler:
    """–ù–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.collector = NewsCollector()
        self.publisher = NewsPublisher()
        self.is_running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.timezone = "Europe/Moscow"  # –ú–°–ö
        
    def _log_job_start(self, job_type: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        now = datetime.now()
        logger.info("=" * 60)
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {job_type}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M:%S –ú–°–ö')}")
        logger.info("=" * 60)
    
    def _log_job_end(self, job_type: str, success: bool):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        now = datetime.now()
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
        logger.info("=" * 60)
        logger.info(f"{status} –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {job_type}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M:%S –ú–°–ö')}")
        logger.info("=" * 60)
    
    def collect_daily_news_job(self):
        """–ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (08:30 –ú–°–ö)"""
        job_type = "–°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π"
        self._log_job_start(job_type)
        
        try:
            logger.info("üîç –ó–∞–ø—É—Å–∫–∞—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
            logger.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Perplexity Deep Research")
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –≤—á–µ—Ä–∞
            success = self.collector.collect_daily_news()
            
            if success:
                logger.info("üéâ –ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
                status = self.collector.get_news_file_status()
                logger.info(f"üìä –°–æ–±—Ä–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {status.get('total_news', 0)}")
                
                self._log_job_end(job_type, True)
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
                self._log_job_end(job_type, False)
                
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            self._log_job_end(job_type, False)
    
    def publish_news_job(self):
        """–ó–∞–¥–∞—á–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)"""
        job_type = "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏"
        self._log_job_start(job_type)
        
        try:
            logger.info("üì± –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            result = self.publisher.publish_next_scheduled_news()
            
            if result['success']:
                priority = result.get('priority', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                remaining = result.get('remaining_news', 0)
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}")
                logger.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
                logger.info(f"üì∞ –û—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤–æ—Å—Ç–µ–π: {remaining}")
                
                self._log_job_end(job_type, True)
            else:
                reason = result.get('reason', 'unknown')
                if reason == 'no_news_ready':
                    logger.info("üì∞ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                    logger.info("‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
                    self._log_job_end(job_type, True)  # –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {reason}")
                    title = result.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å')
                    attempts = result.get('attempts', 0)
                    logger.error(f"üìã –ù–æ–≤–æ—Å—Ç—å: {title[:50]}...")
                    logger.error(f"üîÑ –ü–æ–ø—ã—Ç–æ–∫: {attempts}")
                    self._log_job_end(job_type, False)
                    
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            self._log_job_end(job_type, False)
    
    def show_daily_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–Ω—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        logger.info("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ù–ê –°–ï–ì–û–î–ù–Ø:")
        logger.info("-" * 40)
        
        # –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞
        collection_status = self.collector.get_news_file_status()
        if collection_status['exists']:
            logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–Ω—ã: {collection_status['total_news']} —à—Ç.")
            logger.info(f"‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞: {collection_status.get('collected_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            logger.info("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã")
        
        # –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        publication_status = self.publisher.get_publication_status()
        if publication_status['file_exists']:
            total = publication_status['total_news']
            published = publication_status['published_count']
            unpublished = publication_status['unpublished_count']
            
            logger.info(f"üì± –ü—É–±–ª–∏–∫–∞—Ü–∏–∏: {published}/{total} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            logger.info(f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {unpublished} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º
            for detail in publication_status.get('news_details', []):
                if not detail['published']:
                    priority = detail['priority']
                    time_str = detail['scheduled_time']
                    title = detail['title']
                    logger.info(f"  üìå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority} ({time_str}): {title}")
        else:
            logger.info("üì± –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö")
        
        logger.info("-" * 40)
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        schedule.clear()
        
        logger.info("üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á (–ú–°–ö):")
        logger.info(f"  üì∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å: {config.PUBLICATIONS_PER_DAY}")
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –≤ 08:30
        schedule.every().day.at(config.COLLECTION_TIME).do(self.collect_daily_news_job)
        logger.info(f"  üîç –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π: {config.COLLECTION_TIME}")
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–æ PUBLICATIONS_PER_DAY)
        actual_schedule = config.PUBLICATION_SCHEDULE[:config.PUBLICATIONS_PER_DAY]
        for i, time_str in enumerate(actual_schedule, 1):
            schedule.every().day.at(time_str).do(self.publish_news_job)
            logger.info(f"  üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è #{i}: {time_str}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—É—Å–∫–∏
        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {schedule.next_run()}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ú–°–ö
        if hasattr(config, 'USER_TIMEZONE') and config.USER_TIMEZONE != "Europe/Moscow":
            logger.info(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {config.USER_TIMEZONE}")
    
    def run_manual_collection(self):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        logger.info("üõ†Ô∏è –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        self.collect_daily_news_job()
    
    def run_manual_publication(self):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        logger.info("üõ†Ô∏è –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        self.publish_news_job()
    
    def force_publish_priority(self, priority: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        logger.info(f"üõ†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}...")
        
        success = self.publisher.force_publish_by_priority(priority)
        
        if success:
            logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}")
        
        return success
    
    def test_components(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
        """
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        all_ok = True
        
        # –¢–µ—Å—Ç Perplexity API (—á–µ—Ä–µ–∑ collector)
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Perplexity Deep Research...")
        try:
            if hasattr(self.collector.perplexity_client, 'test_connection'):
                perplexity_ok = self.collector.perplexity_client.test_connection()
            else:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
                logger.info("‚úÖ Perplexity –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                perplexity_ok = True
                
            if perplexity_ok:
                logger.info("‚úÖ Perplexity Deep Research —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.error("‚ùå Perplexity Deep Research –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                all_ok = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Perplexity: {e}")
            all_ok = False
        
        # –¢–µ—Å—Ç Telegram API (—á–µ—Ä–µ–∑ publisher)
        logger.info("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram API...")
        try:
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            telegram_ok = loop.run_until_complete(
                self.publisher.telegram_client.test_connection()
            )
            loop.close()
            
            if telegram_ok:
                logger.info("‚úÖ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.error("‚ùå Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                all_ok = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram: {e}")
            all_ok = False
        
        # –¢–µ—Å—Ç OpenAI API (—á–µ—Ä–µ–∑ publisher)
        logger.info("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API...")
        try:
            openai_ok = self.publisher.openai_client.test_connection()
            
            if openai_ok:
                logger.info("‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.error("‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                all_ok = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ OpenAI: {e}")
            all_ok = False
        
        # –¢–µ—Å—Ç –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            if self.collector.data_dir.exists():
                logger.info("‚úÖ –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                logger.error("‚ùå –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                all_ok = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            all_ok = False
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if all_ok:
            logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
        return all_ok
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.setup_schedule()
        self.is_running = True
        
        logger.info("üéØ –ù–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...")
        logger.info("üìã –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π + –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        self.show_daily_status()
        
        try:
            while self.is_running:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            self.stop_scheduler()
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            self.stop_scheduler()
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        schedule.clear()
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NewsmakerScheduler...")
    
    scheduler = NewsmakerScheduler()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    scheduler.show_daily_status()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    success = scheduler.test_components()
    
    if success:
        logger.info("‚ú® –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")


if __name__ == "__main__":
    main()